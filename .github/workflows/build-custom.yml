name: Build (Custom CSV Profiles - ESP32 Marauder Rewired)

on:
  workflow_dispatch:
    inputs:
      board_label:
        type: choice
        description: 'Select a common Arduino-ESP32 board (or choose "Other (enter FQBN)")'
        default: 'Generic ESP32 Dev Module'
        options:
          - Generic ESP32 Dev Module
          - DOIT ESP32 DEVKIT V1
          - NodeMCU-32S
          - ESP32 DevKitC V4
          - ESP32 WROOM-DA Module
          - ESP32 WROVER Module
          - ESP32 WROVER Kit (all versions)
          - ESP32 PICO-D4
          - AI Thinker ESP32-CAM
          - Lolin D32
          - Lolin D32 Pro
          - FireBeetle2 ESP32-E
          - Heltec WiFi Kit 32 (V3)
          - ESP32-S2 Dev Module
          - ESP32-S2 Saola-1
          - Adafruit Feather ESP32-S2
          - ESP32-S3 Dev Module
          - Adafruit Feather ESP32-S3 (2MB PSRAM)
          - M5StickC / M5StickC-Plus
          - M5Stamp S3
          - Other (enter FQBN)

      fqbn_override:
        description: 'If "Other", paste exact FQBN (e.g., esp32:esp32:nodemcu-32s or esp32:esp32:esp32s3:PSRAM=enabled)'
        required: false
        default: ''

      profile_name:
        type: choice
        description: 'Profile from modules_presets.csv (Auto picks from manifest.json)'
        default: 'Auto (from board)'
        options:
          - Auto (from board)
          - Minimal
          - Standard
          - Full
          - Wardriver
          - Scanner
          - BLE-only
          - Displayless
          - Debug
          - Custom

      modules_csv:
        description: 'If profile_name=Custom: CSV like WIFI,BLE,WEB,SD,GPS,TOUCH,LVGL,NEOPIXEL,BUZZER,BUTTONS,BATTERY,NRF24,USB_MSC,TFT_ON,DEBUG,DUAL_WIFI,2WIFI'
        required: false
        default: ''

      custom_pins:
        description: >
          Free-form pin overrides. Examples:
          "gps_pin=34,33"
          "tft_pin=19,23,18,5,21,22"
          "wifi_pin=19,23,18,5"
          (space-separated key=value lists)
        required: false
        default: ''

      tft_model:
        type: choice
        description: 'Select TFT/Display model (from display_presets.csv)'
        default: 'Auto'
        options:
          - Auto
          - None
          - ILI9341
          - ILI9488
          - ST7789
          - ST7735
          - ILI9225
          - ILI9163
          - SSD1306
          - SH1106
          - SSD1331
          - GC9A01
          - ST7796
          - HX8357
          - ILI9486
          - ILI9481
          - ILI9806
          - EPD2IN9
          - EPD2IN13
          - EPD7IN5
          - RA8875

      filesystem:
        type: choice
        description: 'Filesystem override (blank = default/manifest)'
        default: ''
        options: ['', 'spiffs', 'littlefs']

      partition:
        type: choice
        description: 'Partition CSV (pretty names) ? blank uses manifest/default'
        default: 'Default (use manifest/default)'
        options:
          - 'Default (use manifest/default)'
          - 'Huge App + 1MB FS (hugeapp_1m_fs.csv)'
          - 'Marauder (LittleFS OTA) (marauder_littlefs.csv)'
          - 'Marauder (SPIFFS OTA) (marauder_spiffs_ota.csv)'
          - 'Minimal (LittleFS OTA) (min_littlefs_ota.csv)'
          - 'Minimal (SPIFFS OTA) (min_spiffs_ota.csv)'
          - 'OTA + 1MB FS (ota_1m_fs.csv)'
          - 'Marauder Default (marauder_default.csv)'

      extra_defines:
        description: 'Additional -D flags (space-separated, e.g. FOO=1 BAR)'
        required: false
        default: ''

      core_version:
        description: 'Arduino-ESP32 core'
        required: false
        default: '2.0.11'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install deps (jq + unzip)
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Sanitize manifest.json (strip BOM/CRLF and validate if present)
        shell: bash
        run: |
          set -euo pipefail
          MAN=./scaffold/configs/manifest.json
          if [ -f "$MAN" ]; then
            MAGIC="$(head -c 3 "$MAN" | od -An -tx1 | tr -d ' \n')"
            if [ "$MAGIC" = "efbbbf" ]; then
              tail -c +4 "$MAN" > "$MAN.nobom" && mv "$MAN.nobom" "$MAN"
              echo "Removed UTF-8 BOM from manifest.json"
            fi
            sed -i 's/\r$//' "$MAN"
            jq . "$MAN" >/dev/null
            echo "manifest.json OK"
          else
            echo "manifest.json not present; continuing (fallback map will be used if needed)"
          fi

      - name: Resolve FQBN
        id: map
        shell: bash
        run: |
          set -e
          LABEL="${{ github.event.inputs.board_label }}"
          OVR="${{ github.event.inputs.fqbn_override }}"
          MAN="scaffold/configs/manifest.json"
          set_out() { echo "$1=$2" >> $GITHUB_OUTPUT; }

          if [ "$LABEL" = "Other (enter FQBN)" ]; then
            if [ -z "$OVR" ]; then
              echo "::error ::You chose 'Other' but did not provide fqbn_override"; exit 1
            fi
            set_out fqbn "$OVR"
            exit 0
          fi

          FOUND=""
          if [ -f "$MAN" ]; then
            FQBN=$(jq -r --arg L "$LABEL" '[.boards[] | select(.label==$L)][0].fqbn // empty' "$MAN")
            if [ -n "$FQBN" ]; then
              FOUND="yes"; set_out fqbn "$FQBN"; echo "Resolved (manifest): $LABEL -> $FQBN"
            fi
          fi

          if [ -z "$FOUND" ]; then
            case "$LABEL" in
              "Generic ESP32 Dev Module") FQBN="esp32:esp32:esp32" ;;
              "DOIT ESP32 DEVKIT V1")     FQBN="esp32:esp32:esp32doit-devkit-v1" ;;
              "NodeMCU-32S")              FQBN="esp32:esp32:nodemcu-32s" ;;
              "ESP32 DevKitC V4")         FQBN="esp32:esp32:esp32" ;;
              "ESP32 WROOM-DA Module")    FQBN="esp32:esp32:esp32da" ;;
              "ESP32 WROVER Module")      FQBN="esp32:esp32:esp32wrover" ;;
              "ESP32 WROVER Kit (all versions)") FQBN="esp32:esp32:esp32wroverkit" ;;
              "ESP32 PICO-D4")            FQBN="esp32:esp32:pico32" ;;
              "AI Thinker ESP32-CAM")     FQBN="esp32:esp32:esp32cam" ;;
              "Lolin D32")                FQBN="esp32:esp32:lolin_d32" ;;
              "Lolin D32 Pro")            FQBN="esp32:esp32:lolin_d32_pro" ;;
              "FireBeetle2 ESP32-E")      FQBN="esp32:esp32:dfrobot_firebeetle2_esp32e" ;;
              "Heltec WiFi Kit 32 (V3)")  FQBN="esp32:esp32:heltec_wifi_kit_32_V3" ;;
              "ESP32-S2 Dev Module")      FQBN="esp32:esp32:esp32s2" ;;
              "ESP32-S2 Saola-1")         FQBN="esp32:esp32:esp32s2-saola-1" ;;
              "Adafruit Feather ESP32-S2") FQBN="esp32:esp32:adafruit_feather_esp32s2" ;;
              "ESP32-S3 Dev Module")      FQBN="esp32:esp32:esp32s3" ;;
              "Adafruit Feather ESP32-S3 (2MB PSRAM)") FQBN="esp32:esp32:adafruit_feather_esp32s3" ;;
              "M5StickC / M5StickC-Plus") FQBN="esp32:esp32:m5stick-c" ;;
              "M5Stamp S3")               FQBN="esp32:esp32:m5stack_stampS3" ;;
              *) echo "::error ::Unknown board label: $LABEL"; exit 1 ;;
            esac
            set_out fqbn "$FQBN"
            echo "Resolved (fallback map): $LABEL -> $FQBN"
          fi

      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        id: core
        run: |
          CORE_VER="${{ github.event.inputs.core_version }}"
          echo "core_ver=$CORE_VER" >> $GITHUB_OUTPUT
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          
      - name: Clean conflicting libs
        run: |
          rm -rf "$HOME/Arduino/libraries/XPT2046_Touchscreen" || true
          rm -rf "$HOME/Arduino/libraries/TFT_eSPI" || true
          echo "Removed conflicting TFT/Touch libraries"
      
      - name: Extract pre-bundled libs (CSV-driven from scaffold/lib)
        shell: bash
        run: |
          set -euo pipefail
          CSV="scaffold/configs/lib_list.csv"
          ZIPROOT="scaffold/lib"
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"

          if [ ! -f "$CSV" ]; then
            echo "::error ::$CSV not found"; exit 1
          fi

          while IFS=',' read -r ZIP DESC; do
            [[ "$ZIP" =~ ^# ]] && continue
            ZIP=$(echo "$ZIP" | xargs)   # trim
            DESC=$(echo "$DESC" | xargs)
            [ -z "$ZIP" ] && continue

            FILE="$ZIPROOT/$ZIP"
            if [ -f "$FILE" ]; then
              echo "Unpacking $ZIP ($DESC)"
              unzip -o "$FILE" -d "$LIBDIR" >/dev/null
            else
              echo "WARNING: $ZIP not found in $ZIPROOT, skipping ($DESC)"
            fi
          done < "$CSV"

          echo "Installed libs in $LIBDIR:"
          ls -lh "$LIBDIR"
      
      - name: Create ESP32MarauderRegistry local library
        run: |
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          echo -e "name=ESP32MarauderRegistry\nversion=0.0.3\narchitectures=*\nincludes=registry/ToolRegistry.h" > "$LIBDIR/library.properties"

      - name: Prepare Sketch Folder
        id: prep
        run: |
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          rm -rf "$SKETCH_DIR"; mkdir -p "$SKETCH_DIR"
          SRC_INO="$(ls scaffold/*.ino | head -n 1)"
          cp "$SRC_INO" "$SKETCH_DIR/esp32_marauder_rewired.ino"
          cp -r scaffold/* "$SKETCH_DIR/" || true
          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT

      - name: Resolve modules
        id: mods
        shell: bash
        run: |
          set -euo pipefail
          PRESETS="modules_presets.csv"
          CHOICE="${{ github.event.inputs.profile_name }}"
          CUSTOM="${{ github.event.inputs.modules_csv }}"
          if [ "$CHOICE" = "Custom" ]; then
            echo "csv=$CUSTOM" >> $GITHUB_OUTPUT
            exit 0
          fi
          LINE=$(awk -F',' -v want="$CHOICE" 'tolower($1)==tolower(want){$1="";sub(/^,/, "");print;exit}' "$PRESETS")
          echo "csv=$LINE" >> $GITHUB_OUTPUT

      - name: Resolve Display (from display_presets.csv)
        id: disp_resolve
        shell: bash
        run: |
          set -euo pipefail
          PRESET="${{ github.event.inputs.tft_model }}"
          CSV="scaffold/configs/displays/display_presets.csv"

          out(){ echo "$1=$2" >> $GITHUB_OUTPUT; }

          out disp_define ""
          out disp_header  ""

          if [ "$PRESET" = "Auto" ]; then
            echo "TFT model = Auto (use manifest/defaults if any)."
            exit 0
          fi

          if [ "$PRESET" = "None" ]; then
            echo "TFT model = None (displayless build)."
            exit 0
          fi

          [ -f "$CSV" ] || { echo "::error ::$CSV not found"; exit 1; }

          LINE=$(awk -F',' -v want="$PRESET" '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*#/ {next}
            NF>=4 {
              m=$2; gsub(/^[[:space:]]+|[[:space:]]+$/, "", m);
              if (m==want) { print; exit }
            }' "$CSV")

          if [ -z "$LINE" ]; then
            echo "::error ::Display '\''$PRESET'\'' not found in '\''$CSV'\''"
            exit 1
          fi

          IFS=',' read -r profile model header defines <<< "$LINE"

          header="$(echo "$header" | xargs)"
          defines="$(echo "$defines" | xargs)"

          out disp_header "$header"
          out disp_define "$defines"
          echo "Resolved display: $model -> header=$header define=$defines"

      - name: Configure TFT_eSPI header (display presets)
        shell: bash
        run: |
          HDR="${{ steps.disp_resolve.outputs.disp_header }}"
          if [ -n "$HDR" ]; then
            TE="$HOME/Arduino/libraries/TFT_eSPI"
            mkdir -p "$TE"
            echo "// Auto-generated by workflow" > "$TE/User_Setup_Select.h"
            echo "#include <${HDR}>" >> "$TE/User_Setup_Select.h"
            echo "Applied TFT_eSPI header from presets: $HDR"
          else
            echo "No TFT header from presets (Auto/None selected)."
          fi

      - name: Resolve board pin preset (pins_presets.csv)
        id: pinpreset
        shell: bash
        run: |
          set -euo pipefail
          CSV="scaffold/configs/pins/pins_presets.csv"
          BOARD="${{ github.event.inputs.board_label }}"

          out(){ echo "$1=$2" >> "$GITHUB_OUTPUT"; }

          if [ ! -f "$CSV" ]; then
            echo "pins_presets.csv not found at $CSV (skipping)."
            out pins_defs ""
            exit 0
          fi

          LINE=$(awk -F',' -v want="$BOARD" '
            BEGIN{IGNORECASE=1}
            NR==1{next}
            $1==want {print $2; exit}
          ' "$CSV")

          if [ -z "$LINE" ]; then
            echo "No preset pins for board: $BOARD (ok)."
            out pins_defs ""
            exit 0
          fi

          OUT=""
          IFS=';' read -ra PAIRS <<< "$LINE"
          for kv in "${PAIRS[@]}"; do
            k="${kv%%=*}"; v="${kv#*=}"
            k="$(echo "$k" | xargs)"
            v="$(echo "$v" | xargs)"
            [ -n "$k" ] && [ -n "$v" ] && OUT="$OUT -D${k}=${v}"
          done

          echo "Preset pin defines: $OUT"
          out pins_defs "$OUT"

      - name: Resolve FS/Partition
        id: fs
        shell: bash
        run: |
          set -euo pipefail
          FS_INPUT="${{ github.event.inputs.filesystem }}"
          PART_INPUT_RAW="${{ github.event.inputs.partition }}"

          # Map pretty label -> actual CSV filename (if present)
          part_from_pretty () {
            local s="$1"
            # Default selection means "use manifest"
            if [ -z "$s" ] || [ "$s" = "Default (use manifest)" ]; then
              echo ""
              return
            fi

            # If it looks like "... (filename.csv)" extract filename without regex
            case "$s" in
              *"("*.csv")"*)
                local tmp="${s##*(}"   # strip everything up to last "("
                tmp="${tmp%)}"        # strip trailing ")"
                echo "$tmp"
                ;;
              *)
                # Fallback: assume user typed a raw filename
                echo "$s"
                ;;
            esac
          }

          PART_INPUT="$(part_from_pretty "$PART_INPUT_RAW")"

          # Prefer user input; otherwise manifest defaults resolved earlier
          FS="${FS_INPUT:-${{ steps.map.outputs.def_fs }}}"
          if [ -n "$PART_INPUT" ]; then
            PART="$PART_INPUT"
          else
            PART="${{ steps.map.outputs.def_part }}"
          fi

          echo "fs=$FS" >> $GITHUB_OUTPUT
          echo "partition=$PART" >> $GITHUB_OUTPUT

          # If a custom partition CSV is referenced, install it into the core (optional convenience)
          if [ -n "$PART" ]; then
            SRC="${GITHUB_WORKSPACE}/partitions/$PART"
            DEST="$HOME/.arduino15/packages/esp32/hardware/esp32/${{ github.event.inputs.core_version }}/tools/partitions"
            if [ -f "$SRC" ]; then
              mkdir -p "$DEST"
              cp -f "$SRC" "$DEST/$PART"
              echo "Installed custom partition CSV to $DEST/$PART"
            else
              echo "Partition CSV '$PART' not found in repo /partitions; relying on core's copy (if any)."
            fi
          fi

      - name: Parse custom_pins input
        id: custompins
        shell: bash
        run: |
          set -euo pipefail
          RAW="${{ github.event.inputs.custom_pins }}"
          OUT=""

          trim() { awk '{$1=$1;print}' <<<"$1"; }
          emit_kv(){ local k="$1"; local v="$2"; [ -n "$(trim "$v")" ] && OUT="$OUT -D${k}=$(trim "$v")"; }

          IFS=' ' read -r -a TOKS <<<"$(echo "$RAW" | tr ';' ' ')"
          for tok in "${TOKS[@]}"; do
            [ -z "$tok" ] && continue
            [[ "$tok" != *"="* ]] && { echo "Skipping token without '=': $tok"; continue; }
            KEY="$(echo "${tok%%=*}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9_]\+//g')"
            VALS_RAW="${tok#*=}"
            IFS=',' read -r -a V <<<"$VALS_RAW"

            case "$KEY" in
              gps_pin)
                emit_kv GPS_RX "${V[0]:-}"; emit_kv GPS_TX "${V[1]:-}"
                emit_kv GPS_PPS "${V[2]:-}"; emit_kv GPS_EN "${V[3]:-}" ;;
              i2c_pin)
                emit_kv I2C_SDA "${V[0]:-}"; emit_kv I2C_SCL "${V[1]:-}" ;;
              tft_pin)
                # MISO,MOSI,SCK,CS,DC,RST
                emit_kv TFT_MISO "${V[0]:-}"; emit_kv TFT_MOSI "${V[1]:-}"; emit_kv TFT_SCK "${V[2]:-}"
                emit_kv TFT_CS "${V[3]:-}";  emit_kv TFT_DC "${V[4]:-}";  emit_kv TFT_RST "${V[5]:-}" ;;
              sd_pin)
                # MISO,MOSI,SCK,CS
                emit_kv SD_MISO "${V[0]:-}"; emit_kv SD_MOSI "${V[1]:-}"; emit_kv SD_SCK "${V[2]:-}"; emit_kv SD_CS "${V[3]:-}" ;;
              neopixel_pin) emit_kv NEOPIXEL "${V[0]:-}" ;;
              buzzer_pin)   emit_kv BUZZER   "${V[0]:-}" ;;
              buttons_pin)  emit_kv BTN1 "${V[0]:-}"; emit_kv BTN2 "${V[1]:-}"; emit_kv BTN3 "${V[2]:-}" ;;
              wifi_pin)
                # MISO,MOSI,SCK,CS
                emit_kv WIFI_MISO "${V[0]:-}"; emit_kv WIFI_MOSI "${V[1]:-}"; emit_kv WIFI_SCK "${V[2]:-}"; emit_kv WIFI_CS "${V[3]:-}" ;;
              wifi2_pin)
                # MISO,MOSI,SCK,CS  (second Wi-Fi module)
                emit_kv WIFI2_MISO "${V[0]:-}"; emit_kv WIFI2_MOSI "${V[1]:-}"; emit_kv WIFI2_SCK "${V[2]:-}"; emit_kv WIFI2_CS "${V[3]:-}" ;;
              *)
                UKEY="$(echo "$KEY" | tr '[:lower:]' '[:upper:]')"
                emit_kv "$UKEY" "$VALS_RAW" ;;
            esac
          done

          echo "custom_pin_defs=$OUT" >> "$GITHUB_OUTPUT"
          echo "Custom pin defines: $OUT"

      - name: Compose defines
        id: defs
        shell: bash
        run: |
          set -euo pipefail
          D=""
          CSV_FLAGS="${{ steps.mods.outputs.csv }}"

          add () { [[ "$CSV_FLAGS" == *"$1"* ]] && D="$D -D$2"; }

          add WIFI      ENABLE_WIFI
          add BLE       ENABLE_BLE
          add WEB       ENABLE_WEB
          add SD        ENABLE_SD
          add GPS       ENABLE_GPS
          add TOUCH     ENABLE_TOUCH
          add LVGL      ENABLE_LVGL
          add NEOPIXEL  ENABLE_NEOPIXEL
          add BUZZER    ENABLE_BUZZER
          add BUTTONS   ENABLE_BUTTONS
          add BATTERY   ENABLE_BATTERY
          add NRF24     ENABLE_NRF24
          add USB_MSC   ENABLE_USB_MSC
          add DUAL_WIFI ENABLE_DUAL_WIFI
          add 2WIFI     ENABLE_2WIFI

          # From board pin presets
          PRESET_PINS="${{ steps.pinpreset.outputs.pins_defs }}"
          [ -n "$PRESET_PINS" ] && D="$D $PRESET_PINS"

          # From free-text custom_pins parser
          CUST="${{ steps.custompins.outputs.custom_pin_defs }}"
          [ -n "$CUST" ] && D="$D $CUST"

          # From display resolver
          DISP_DEF="${{ steps.disp_resolve.outputs.disp_define }}"
          [ -n "$DISP_DEF" ] && D="$D -D$DISP_DEF"

          # Extra manual -D flags
          EXTRA="${{ github.event.inputs.extra_defines }}"
          if [ -n "$EXTRA" ]; then
            for t in $EXTRA; do D="$D -D$t"; done
          fi

          echo "Defines => $D"
          echo "defs=$D" >> $GITHUB_OUTPUT

      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          set -euo pipefail
          FQBN="${{ steps.map.outputs.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          DEFS="${{ steps.defs.outputs.defs }}"
          FS="${{ github.event.inputs.filesystem }}"
          PART="${{ steps.fs.outputs.part }}"
          CPP_FLAGS="$DEFS"

          echo "FQBN: $FQBN"
          echo "FS:   ${FS:-<default>}"
          echo "PART: ${PART:-<default>}"
          echo "CPP_FLAGS: $CPP_FLAGS"

          ARGS=(--fqbn "$FQBN" --warnings none --export-binaries
            --build-property "compiler.cpp.extra_flags=$CPP_FLAGS"
            --build-property "compiler.c.extra_flags=$CPP_FLAGS")

          [ -n "$FS" ] && ARGS+=(--build-property "board_build.filesystem=$FS")
          [ -n "$PART" ] && ARGS+=(--build-property "build.partitions=${PART%.csv}")

          echo "arduino-cli compile args:"
          printf '  %q\n' "${ARGS[@]}"

          arduino-cli compile "${ARGS[@]}" "$SKETCH_DIR"

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: fw_${{ github.event.inputs.board_label }}_${{ github.sha }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14