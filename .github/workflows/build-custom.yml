name: Build (Custom CSV Profiles — ESP32 Marauder Rewired)

on:
  workflow_dispatch:
    inputs:
      board_label:
        type: choice
        description: 'Select a common Arduino-ESP32 board (or choose "Other (enter FQBN)")'
        default: 'Generic ESP32 Dev Module'
        options:
          - Generic ESP32 Dev Module
          - DOIT ESP32 DEVKIT V1
          - NodeMCU-32S
          - ESP32 DevKitC V4
          - ESP32 WROOM-DA Module
          - ESP32 WROVER Module
          - ESP32 WROVER Kit (all versions)
          - ESP32 PICO-D4
          - AI Thinker ESP32-CAM
          - Lolin D32
          - Lolin D32 Pro
          - FireBeetle2 ESP32-E
          - Heltec WiFi Kit 32 (V3)
          - ESP32-S2 Dev Module
          - ESP32-S2 Saola-1
          - Adafruit Feather ESP32-S2
          - ESP32-S3 Dev Module
          - Adafruit Feather ESP32-S3 (2MB PSRAM)
          - M5StickC / M5StickC-Plus
          - M5Stamp S3
          - Other (enter FQBN)

      fqbn_override:
        description: 'If "Other", paste exact FQBN (e.g., esp32:esp32:nodemcu-32s or esp32:esp32:esp32s3:PSRAM=enabled)'
        required: false
        default: ''

      profile_name:
        type: choice
        description: 'Profile from modules_presets.csv (Auto picks from manifest.json)'
        default: 'Auto (from board)'
        options:
          - Auto (from board)
          - Minimal
          - Standard
          - Full
          - Wardriver
          - Scanner
          - BLE-only
          - Displayless
          - Debug
          - Custom

      modules_csv:
        description: 'If profile_name=Custom: CSV like WIFI,BLE,WEB,SD,GPS,TOUCH,LVGL,NEOPIXEL,BUZZER,BUTTONS,BATTERY,NRF24,USB_MSC,TFT_ON'
        required: false
        default: ''

      filesystem:
        type: choice
        description: 'Filesystem override (blank = default)'
        default: ''
        options: ['', 'spiffs', 'littlefs']

      partition:
        type: choice
        description: 'Partition CSV override from /partitions (blank = default)'
        default: ''
        options:
          - ''
          - hugeapp_1m_fs.csv
          - marauder_littlefs.csv
          - marauder_spiffs_ota.csv
          - min_littlefs_ota.csv
          - min_spiffs_ota.csv
          - ota_1m_fs.csv

      extra_defines:
        description: 'Additional -D flags (space-separated, e.g. FOO=1 BAR)'
        required: false
        default: ''

      core_version:
        description: 'Arduino-ESP32 core'
        required: false
        default: '2.0.11'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install deps (jq + unzip)
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      # Resolve a working FQBN from the dropdown (or override)
      - name: Resolve FQBN
        id: map
        shell: bash
        run: |
          set -e
          LABEL="${{ github.event.inputs.board_label }}"
          OVR="${{ github.event.inputs.fqbn_override }}"

          case "$LABEL" in
            "Generic ESP32 Dev Module")                FQBN="esp32:esp32:esp32" ;;
            "DOIT ESP32 DEVKIT V1")                    FQBN="esp32:esp32:esp32doit-devkit-v1" ;;
            "NodeMCU-32S")                              FQBN="esp32:esp32:nodemcu-32s" ;;
            "ESP32 DevKitC V4")                         FQBN="esp32:esp32:esp32" ;;
            "ESP32 WROOM-DA Module")                    FQBN="esp32:esp32:esp32da" ;;
            "ESP32 WROVER Module")                      FQBN="esp32:esp32:esp32wrover" ;;
            "ESP32 WROVER Kit (all versions)")          FQBN="esp32:esp32:esp32wroverkit" ;;
            "ESP32 PICO-D4")                            FQBN="esp32:esp32:pico32" ;;
            "AI Thinker ESP32-CAM")                     FQBN="esp32:esp32:esp32cam" ;;
            "Lolin D32")                                FQBN="esp32:esp32:lolin_d32" ;;
            "Lolin D32 Pro")                            FQBN="esp32:esp32:lolin_d32_pro" ;;
            "FireBeetle2 ESP32-E")                      FQBN="esp32:esp32:dfrobot_firebeetle2_esp32e" ;;
            "Heltec WiFi Kit 32 (V3)")                  FQBN="esp32:esp32:heltec_wifi_kit_32_V3" ;;
            "ESP32-S2 Dev Module")                      FQBN="esp32:esp32:esp32s2" ;;
            "ESP32-S2 Saola-1")                         FQBN="esp32:esp32:esp32s2-saola-1" ;;
            "Adafruit Feather ESP32-S2")                FQBN="esp32:esp32:adafruit_feather_esp32s2" ;;
            "ESP32-S3 Dev Module")                      FQBN="esp32:esp32:esp32s3" ;;
            "Adafruit Feather ESP32-S3 (2MB PSRAM)")    FQBN="esp32:esp32:adafruit_feather_esp32s3" ;;
            "M5StickC / M5StickC-Plus")                 FQBN="esp32:esp32:m5stick-c" ;;
            "M5Stamp S3")                               FQBN="esp32:esp32:m5stack_stampS3" ;;
            "Other (enter FQBN)")
              if [ -z "$OVR" ]; then
                echo "::error ::You chose 'Other' but did not provide 'fqbn_override'"; exit 1
              fi
              FQBN="$OVR"
              ;;
            *) echo "::error ::Unknown board label: $LABEL"; exit 1 ;;
          esac

          # Keep compatibility with rest of pipeline
          echo "fqbn=$FQBN"       >> $GITHUB_OUTPUT
          echo "flag="            >> $GITHUB_OUTPUT
          echo "def_fs="          >> $GITHUB_OUTPUT
          echo "def_part="        >> $GITHUB_OUTPUT
          echo "tft_enabled="     >> $GITHUB_OUTPUT
          echo "tft_header="      >> $GITHUB_OUTPUT
          echo "Resolved: $LABEL -> $FQBN"

      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        id: core
        run: |
          CORE_VER="${{ github.event.inputs.core_version }}"
          echo "core_ver=$CORE_VER" >> $GITHUB_OUTPUT
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      # Use your pre-bundled libraries tar (optional)
      - name: Extract pre-bundled libs (lib.tar)
        run: |
          mkdir -p $HOME/Arduino/libraries
          if [ -f lib.tar ]; then
            tar -xf lib.tar -C $HOME/Arduino/libraries
          else
            echo "lib.tar not found; continuing (build may fail without libs)."
          fi
          ls -1 $HOME/Arduino/libraries || true

      # Local registry lib so includes resolve nicely
      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP

      # Optional TFT header pack
      - name: Unpack display settings (optional)
        run: |
          if [ -f "display_settings.zip" ]; then
            mkdir -p "$HOME/Arduino/libraries/TFT_eSPI"
            unzip -o "display_settings.zip" -d "$HOME/Arduino/libraries/TFT_eSPI" >/dev/null
            echo "Unpacked TFT_eSPI headers"
          else
            echo "display_settings.zip not present; skipping"
          fi

      # Prepare sketch from scaffold/
      - name: Prepare Sketch Folder
        id: prep
        shell: bash
        run: |
          set -e
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          rm -rf "$SKETCH_DIR"
          mkdir -p "$SKETCH_DIR"

          if [ -f scaffold/esp32_marauder_rewired.ino ]; then
            SRC_INO="scaffold/esp32_marauder_rewired.ino"
          else
            SRC_INO="$(ls scaffold/*.ino | head -n 1)"
            [ -n "$SRC_INO" ] || (echo "::error ::No .ino found under scaffold/"; exit 1)
          fi
          echo "Using INO: $SRC_INO"
          cp "$SRC_INO" "$SKETCH_DIR/esp32_marauder_rewired.ino"

          pushd scaffold >/dev/null
          find . -type f ! -name '*.ino' -print0 \
            | xargs -0 -I {} bash -c 'mkdir -p "'"$SKETCH_DIR"'"/$(dirname "{}"); cp "{}" "'"$SKETCH_DIR"'"/"{}"'
          popd >/dev/null

          [ -f "configs.h" ] && cp "configs.h" "$SKETCH_DIR/configs.h"

          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          find "$SKETCH_DIR" -maxdepth 2 -type f | sort

      # Apply TFT header if you decide to set one later (kept for compatibility)
      - name: Configure TFT_eSPI header (board default; CSV may force)
        id: tft
        shell: bash
        run: |
          USE="${{ steps.map.outputs.tft_enabled }}"
          HDR="${{ steps.map.outputs.tft_header }}"
          if [ "$USE" = "true" ] && [ -n "$HDR" ]; then
            TE="$HOME/Arduino/libraries/TFT_eSPI"
            mkdir -p "$TE"
            echo "// Auto-generated by workflow" > "$TE/User_Setup_Select.h"
            echo "#include <${HDR}>" >> "$TE/User_Setup_Select.h"
            echo "Applied TFT header: $HDR"
            echo "tft_define=-DENABLE_TFT" >> $GITHUB_OUTPUT
          else
            echo "TFT not applied (USE=$USE, HDR='$HDR')."
            echo "tft_define=" >> $GITHUB_OUTPUT
          fi

      # ✅ NEW: Auto/Named/Custom module resolver (reads manifest.json for Auto)
      - name: Resolve modules (Auto/Named/Custom)
        id: mods
        shell: bash
        run: |
          set -e
          PRESETS="${GITHUB_WORKSPACE}/modules_presets.csv"
          MAN="scaffold/configs/manifest.json"
          BOARD="${{ github.event.inputs.board_label }}"
          CHOICE="${{ github.event.inputs.profile_name }}"
          CUSTOM="${{ github.event.inputs.modules_csv }}"

          norm_csv () { tr -d '\r' | sed -E 's/[[:space:]]*,[[:space:]]*/,/g; s/^[[:space:]]+|[[:space:]]+$//g'; }

          if [ "$CHOICE" = "Custom" ]; then
            RESOLVED="$(echo "$CUSTOM" | norm_csv)"
            echo "Using Custom CSV: $RESOLVED"
            echo "csv=$RESOLVED" >> $GITHUB_OUTPUT
            echo "chosen_profile=Custom(CSV)" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "$CHOICE" = "Auto (from board)" ]; then
            if [ -f "$MAN" ]; then
              PROFILE=$(jq -r --arg L "$BOARD" \
                '[.boards[] | select(.label==$L)][0] | (.defaults.profile // .default_profile // "Standard")' "$MAN")
              [ -n "$PROFILE" ] || PROFILE="Standard"
              echo "Auto profile for '$BOARD' from manifest: $PROFILE"
            else
              PROFILE="Standard"
              echo "manifest.json not found; falling back to: $PROFILE"
            fi
          else
            PROFILE="$CHOICE"
          fi

          if [ ! -f "$PRESETS" ]; then
            echo "::error ::modules_presets.csv not found at repo root."
            exit 1
          fi

          LINE=$(awk -F',' -v want="$PROFILE" '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*#/ {next}
            NF>=2 {
              p=$1; gsub(/^[[:space:]]+|[[:space:]]+$/, "", p);
              if (p==want) {
                out=$2; for (i=3;i<=NF;i++) out=out "," $i; print out; exit
              }
            }' "$PRESETS")

          if [ -z "$LINE" ]; then
            echo "::warning ::Profile '"$PROFILE"' not found; falling back to Standard."
            PROFILE="Standard"
            LINE=$(awk -F',' -v want="$PROFILE" '
              BEGIN{IGNORECASE=1}
              /^[[:space:]]*#/ {next}
              NF>=2 {
                p=$1; gsub(/^[[:space:]]+|[[:space:]]+$/, "", p);
                if (p==want) {
                  out=$2; for (i=3;i<=NF;i++) out=out "," $i; print out; exit
                }
              }' "$PRESETS")
            if [ -z "$LINE" ]; then
              echo "::error ::Fallback profile 'Standard' missing from modules_presets.csv"
              exit 1
            fi
          fi

          RESOLVED="$(echo "$LINE" | norm_csv)"
          echo "Resolved modules for '$PROFILE': $RESOLVED"
          echo "csv=$RESOLVED" >> $GITHUB_OUTPUT
          echo "chosen_profile=$PROFILE" >> $GITHUB_OUTPUT

      # Filesystem/partition overrides (optional)
      - name: Resolve FS/Partition and install CSV into core (if provided)
        id: fs
        shell: bash
        run: |
          CORE_VER="${{ github.event.inputs.core_version }}"
          FS_OVR="${{ github.event.inputs.filesystem }}"
          PART_OVR="${{ github.event.inputs.partition }}"
          echo "fs=$FS_OVR"     >> $GITHUB_OUTPUT
          echo "part=$PART_OVR" >> $GITHUB_OUTPUT
          if [ -n "$PART_OVR" ]; then
            SRC="${GITHUB_WORKSPACE}/partitions/$PART_OVR"
            if [ -f "$SRC" ]; then
              DEST="$HOME/.arduino15/packages/esp32/hardware/esp32/${{ github.event.inputs.core_version }}/tools/partitions"
              mkdir -p "$DEST"
              cp "$SRC" "$DEST/$PART_OVR"
              echo "Installed custom partition CSV to $DEST/$PART_OVR"
            else
              echo "Partition CSV '$PART_OVR' not found in repo /partitions; relying on core's copy (if any)."
            fi
          fi

      # Compose -D flags from the resolved CSV + optional TFT flag + extra_defines
      - name: Compose defines
        id: defs
        shell: bash
        run: |
          set -e
          D=""
          CSV_FLAGS="${{ steps.mods.outputs.csv }}"
          TFT_D="${{ steps.tft.outputs.tft_define }}"

          add () { echo "$CSV_FLAGS" | grep -qi "\b$1\b" && D="$D -D$2"; }
          add WIFI       ENABLE_WIFI
          add BLE        ENABLE_BLE
          add WEB        ENABLE_WEB
          add SD         ENABLE_SD
          add GPS        ENABLE_GPS
          add TOUCH      ENABLE_TOUCH
          add LVGL       ENABLE_LVGL
          add NEOPIXEL   ENABLE_NEOPIXEL
          add BUZZER     ENABLE_BUZZER
          add BUTTONS    ENABLE_BUTTONS
          add BATTERY    ENABLE_BATTERY
          add NRF24      ENABLE_NRF24
          add USB_MSC    ENABLE_USB_MSC

          echo "$CSV_FLAGS" | grep -qi '\bTFT_ON\b'  && D="$D -DENABLE_TFT"
          echo "$CSV_FLAGS" | grep -qi '\bTFT_OFF\b' && D="$(echo "$D" | sed 's/ -DENABLE_TFT//g')"
          [ -n "$TFT_D" ] && D="$D $TFT_D"

          EXTRA="${{ github.event.inputs.extra_defines }}"
          if [ -n "$EXTRA" ]; then for t in $EXTRA; do D="$D -D$t"; done; fi

          echo "defs=$D" >> $GITHUB_OUTPUT
          echo "Defines => $D"

      # ───────────────────────────────────────────────────────────────────────────
      # COMPILE BLOCK (FS/partition props included)
      # ───────────────────────────────────────────────────────────────────────────
      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          set -e
          FQBN="${{ steps.map.outputs.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          DEFS="${{ steps.defs.outputs.defs }}"
          EXTRA_INCLUDES="-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"
          FS="${{ steps.fs.outputs.fs }}"
          PART="${{ steps.fs.outputs.part }}"

          PROPS="--build-property compiler.cpp.extra_flags=\"$EXTRA_INCLUDES $DEFS\" \
                 --build-property compiler.c.extra_flags=\"$EXTRA_INCLUDES $DEFS\""

          [ -n "$FS" ] && PROPS="$PROPS --build-property board_build.filesystem=$FS"

          if [ -n "$PART" ]; then
            mkdir -p "$SKETCH_DIR/partitions"
            if [ -f "partitions/$PART" ]; then
              cp -f "partitions/$PART" "$SKETCH_DIR/partitions/"
            fi
            NAME_ONLY="${PART%.csv}"
            PROPS="$PROPS --build-property build.partitions=$NAME_ONLY"
          fi

          echo "FQBN: $FQBN"
          echo "Filesystem: ${FS:-<default>}"
          echo "Partition:  ${PART:-<default>}"
          echo "Props: $PROPS"

          arduino-cli compile \
            --fqbn "$FQBN" \
            "$SKETCH_DIR" \
            --warnings none \
            --export-binaries \
            $PROPS

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: fw_${{ github.event.inputs.board_label }}_${{ github.sha }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14