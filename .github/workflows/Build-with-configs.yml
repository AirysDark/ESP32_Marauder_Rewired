name: Build (Arduino CLI — ESP32 Marauder Rewired — manifest-driven)

on:
  workflow_dispatch:
    inputs:
      board_label:
        description: 'Board label (must match a "label" in scaffold/configs/manifest.json)'
        required: false
        default: 'OG Marauder'
      filesystem:
        type: choice
        description: 'Override filesystem (blank = use manifest default)'
        default: ''
        options: ['', 'spiffs', 'littlefs']
      partition:
        type: choice
        description: 'Override partition CSV from /partitions (blank = use manifest default)'
        default: ''
        options:
          - ''
          - hugeapp_1m_fs.csv
          - marauder_littlefs.csv
          - marauder_spiffs_ota.csv
          - min_littlefs_ota.csv
          - min_spiffs_ota.csv
          - ota_1m_fs.csv
      core_version:
        description: 'Arduino-ESP32 core version'
        required: false
        default: '2.0.11'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # ---------- Verify & preview manifest ----------
      - name: Load manifest and list available boards
        id: manifest
        shell: bash
        run: |
          set -e
          MAN=./scaffold/configs/manifest.json
          test -f "$MAN" || { echo "::error ::manifest.json not found at $MAN"; exit 1; }
          echo "Detected boards in manifest:"
          jq -r '.boards[].label' "$MAN" | nl -ba
          echo "man_path=$MAN" >> $GITHUB_OUTPUT

      # ---------- Resolve board entry from manifest ----------
      - name: Resolve board from manifest
        id: map
        shell: bash
        run: |
          set -e
          MAN="${{ steps.manifest.outputs.man_path }}"
          WANT="${{ github.event.inputs.board_label }}"
          if [ -z "$WANT" ]; then
            echo "::warning ::No board_label provided; using the first board in manifest."
            WANT=$(jq -r '.boards[0].label' "$MAN")
          fi

          # Does it exist?
          COUNT=$(jq --arg L "$WANT" '[.boards[] | select(.label == $L)] | length' "$MAN")
          if [ "$COUNT" -eq 0 ]; then
            echo "::error ::Board label not found in manifest: $WANT"
            echo "Available labels:"; jq -r '.boards[].label' "$MAN" | nl -ba
            exit 1
          fi

          # Extract fields
          FQBN=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .fqbn' "$MAN")
          TFT_ENABLED=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .tft.enabled // false' "$MAN")
          TFT_HEADER=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .tft.header // ""' "$MAN")
          DEF_FS=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .defaults.filesystem // ""' "$MAN")
          DEF_PART=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .defaults.partition // ""' "$MAN")
          # Join defines array into space-separated -D flags
          DEFINES=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | (.defines // []) | map("-D"+.) | join(" ")' "$MAN")

          echo "board=$WANT"        >> $GITHUB_OUTPUT
          echo "fqbn=$FQBN"         >> $GITHUB_OUTPUT
          echo "tft_enabled=$TFT_ENABLED" >> $GITHUB_OUTPUT
          echo "tft_header=$TFT_HEADER"   >> $GITHUB_OUTPUT
          echo "def_fs=$DEF_FS"     >> $GITHUB_OUTPUT
          echo "def_part=$DEF_PART" >> $GITHUB_OUTPUT
          echo "defines=$DEFINES"   >> $GITHUB_OUTPUT

      # ---------- Arduino CLI ----------
      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        id: core
        run: |
          CORE_VER="${{ github.event.inputs.core_version }}"
          echo "core_ver=$CORE_VER" >> $GITHUB_OUTPUT
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      # ---------- Libraries (prepacked) ----------
      - name: Extract pre-bundled libs (lib.tar)
        run: |
          mkdir -p $HOME/Arduino/libraries
          if [ -f lib.tar ]; then
            tar -xf lib.tar -C $HOME/Arduino/libraries
          else
            echo "lib.tar not found; continuing (build may fail without libs)."
          fi
          ls -1 $HOME/Arduino/libraries || true

      # Local shim so <registry/ToolRegistry.h> resolves
      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP

      # Optional: unpack TFT_eSPI user setups (display_settings.zip at repo root)
      - name: Unpack display settings (optional)
        run: |
          if [ -f "display_settings.zip" ]; then
            mkdir -p "$HOME/Arduino/libraries/TFT_eSPI"
            unzip -o "display_settings.zip" -d "$HOME/Arduino/libraries/TFT_eSPI" >/dev/null
            echo "Unpacked TFT_eSPI headers"
          else
            echo "display_settings.zip not present; skipping"
          fi

      # ---------- Prepare sketch ----------
      - name: Prepare Sketch Folder
        id: prep
        run: |
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          mkdir -p "$SKETCH_DIR"
          cp scaffold/*.ino "$SKETCH_DIR/esp32_marauder_rewired.ino"
          cp -r scaffold/* "$SKETCH_DIR/"
          # bring your root configs.h if present
          if [ -f "configs.h" ]; then
            cp "configs.h" "$SKETCH_DIR/configs.h"
          fi
          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT

      # ---------- Configure TFT_eSPI User_Setup_Select.h if TFT ----------
      - name: Configure TFT_eSPI header (if TFT enabled)
        if: steps.map.outputs.tft_enabled == 'true'
        run: |
          TE="$HOME/Arduino/libraries/TFT_eSPI"
          HDR="${{ steps.map.outputs.tft_header }}"
          if [ -n "$HDR" ]; then
            mkdir -p "$TE"
            echo "// Auto-generated by workflow" > "$TE/User_Setup_Select.h"
            echo "#include <${HDR}>" >> "$TE/User_Setup_Select.h"
            echo "Using TFT_eSPI setup: $HDR"
          else
            echo "TFT enabled but no header provided in manifest; continuing."
          fi

      # ---------- Resolve filesystem/partition (manifest defaults + UI overrides) ----------
      - name: Resolve FS/Partition and install CSV into core (if provided)
        id: fs
        shell: bash
        run: |
          CORE_VER="${{ steps.core.outputs.core_ver }}"
          FS_DEF="${{ steps.map.outputs.def_fs }}"
          PART_DEF="${{ steps.map.outputs.def_part }}"
          FS_OVR="${{ github.event.inputs.filesystem }}"
          PART_OVR="${{ github.event.inputs.partition }}"

          FS_FINAL="$FS_DEF"
          [ -n "$FS_OVR" ] && FS_FINAL="$FS_OVR"

          PART_FINAL="$PART_DEF"
          [ -n "$PART_OVR" ] && PART_FINAL="$PART_OVR"

          echo "fs=$FS_FINAL"   >> $GITHUB_OUTPUT
          echo "part=$PART_FINAL" >> $GITHUB_OUTPUT
          echo "Resolved -> FS='${FS_FINAL}' PART='${PART_FINAL}'"

          # If PART_FINAL exists in repo /partitions, copy to core so the name resolves
          if [ -n "$PART_FINAL" ]; then
            SRC="${GITHUB_WORKSPACE}/partitions/$PART_FINAL"
            if [ -f "$SRC" ]; then
              DEST="$HOME/.arduino15/packages/esp32/hardware/esp32/${CORE_VER}/tools/partitions"
              mkdir -p "$DEST"
              cp "$SRC" "$DEST/$PART_FINAL"
              echo "Installed custom partition CSV to $DEST/$PART_FINAL"
            else
              echo "Partition CSV '$PART_FINAL' not found in repo /partitions; relying on core's copy (if any)."
            fi
          fi

      # ---------- Compile ----------
      - name: Compile (Arduino CLI)
        run: |
          FQBN="${{ steps.map.outputs.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          EXTRA_INCLUDES="-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"

          FS="${{ steps.fs.outputs.fs }}"
          PART="${{ steps.fs.outputs.part }}"
          DEFS="${{ steps.map.outputs.defines }}"   # already like: -DXXX -DYYY

          BUILD_FLAGS=""
          [ -n "$FS" ] && BUILD_FLAGS="$BUILD_FLAGS --build-property board_build.filesystem=$FS"
          [ -n "$PART" ] && BUILD_FLAGS="$BUILD_FLAGS --build-property board_build.partitions=$PART"

          echo "FQBN: $FQBN"
          echo "Defines: $DEFS"
          echo "FS: $FS | PART: $PART"

          arduino-cli compile \
            --fqbn "$FQBN" \
            "$SKETCH_DIR" \
            --warnings none \
            --export-binaries \
            --build-property compiler.cpp.extra_flags="$EXTRA_INCLUDES $DEFS" \
            --build-property compiler.c.extra_flags="$EXTRA_INCLUDES $DEFS" \
            $BUILD_FLAGS

      # ---------- Artifact ----------
      - name: Safe artifact name
        id: art
        run: |
          NAME="fw_${{ steps.map.outputs.board }}_${{ github.sha }}"
          SAFE=$(echo "$NAME" | sed 's/[:<>|*?\\\/ ]/_/g')
          echo "safe=$SAFE" >> $GITHUB_OUTPUT

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.art.outputs.safe }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14
