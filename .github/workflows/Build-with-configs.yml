name: Build (Arduino CLI — ESP32 Marauder Rewired — Per-board FS/Partition + Flags)

on:
  workflow_dispatch:
    inputs:
      board:
        type: choice
        description: "Target board"
        default: "OG Marauder"
        options:
          - Flipper Zero WiFi Dev Board
          - Flipper Zero Multi Board S3
          - OG Marauder
          - Marauder v6
          - Marauder v6.1
          - Marauder Kit
          - Marauder Mini
          - ESP32 LDDB
          - Marauder Dev Board Pro
          - M5StickCPlus
          - M5StickCPlus 2
          - Rev Feather
          - Marauder v7
          - Marauder CYD 2432S028
          - Marauder CYD 2432S024 GUITION
          - Marauder CYD 2432S028 2 USB
          - Marauder v7.1
          - M5Cardputer
          - ESP32-C5-DevKitC-1
          - Generic ESP32

      filesystem:
        type: choice
        description: "Filesystem override (blank = per-board default → core default)"
        default: ""
        options: ["", "spiffs", "littlefs"]

      partition:
        type: choice
        description: "Partition CSV override from /partitions (blank = per-board default → none)"
        default: ""
        options:
          - ""
          - hugeapp_1m_fs.csv
          - marauder_littlefs.csv
          - marauder_spiffs_ota.csv
          - min_littlefs_ota.csv
          - min_spiffs_ota.csv
          - ota_1m_fs.csv

      core_version:
        description: "Arduino-ESP32 core version"
        required: false
        default: "2.0.11"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # ---------- Arduino CLI ----------
      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        id: core
        run: |
          CORE_VER="${{ github.event.inputs.core_version }}"
          echo "core_ver=$CORE_VER" >> $GITHUB_OUTPUT
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      # ---------- Libraries (prepacked) ----------
      - name: Extract pre-bundled libs (lib.tar)
        run: |
          mkdir -p $HOME/Arduino/libraries
          if [ -f lib.tar ]; then
            tar -xf lib.tar -C $HOME/Arduino/libraries
          else
            echo "lib.tar not found; continuing (but build may fail without libs)."
          fi
          ls -1 $HOME/Arduino/libraries || true

      # Local shim so <registry/ToolRegistry.h> resolves
      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP

      # Optional: unpack your TFT_eSPI user setups
      - name: Unpack display settings (optional)
        run: |
          if [ -f "display_settings.zip" ]; then
            mkdir -p "$HOME/Arduino/libraries/TFT_eSPI"
            unzip -o "display_settings.zip" -d "$HOME/Arduino/libraries/TFT_eSPI" >/dev/null
            echo "Unpacked TFT_eSPI headers"
          else
            echo "display_settings.zip not present; skipping"
          fi

      # ---------- Map board → FQBN / TFT / header / -Dflag / defaults ----------
      - name: Resolve board mapping
        id: map
        shell: bash
        run: |
          sel="${{ github.event.inputs.board }}"

          # FQBNs (exactly as in your matrix where applicable)
          declare -A FQBN=(
            ["Flipper Zero WiFi Dev Board"]="esp32:esp32:esp32s2:PartitionScheme=min_spiffs,FlashSize=4M,PSRAM=enabled"
            ["Flipper Zero Multi Board S3"]="esp32:esp32:esp32s3:PartitionScheme=min_spiffs,FlashSize=4M"
            ["OG Marauder"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder v6"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder v6.1"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder Kit"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder Mini"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["ESP32 LDDB"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder Dev Board Pro"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["M5StickCPlus"]="esp32:esp32:m5stick-c:PartitionScheme=min_spiffs"
            ["M5StickCPlus 2"]="esp32:esp32:m5stick-c:PartitionScheme=min_spiffs"
            ["Rev Feather"]="esp32:esp32:esp32s2:PartitionScheme=min_spiffs,FlashSize=4M,PSRAM=enabled"
            ["Marauder v7"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder CYD 2432S028"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder CYD 2432S024 GUITION"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder CYD 2432S028 2 USB"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder v7.1"]="esp32:esp32:dfrobot_firebeetle2_esp32e:FlashSize=16M,PartitionScheme=min_spiffs,PSRAM=enabled"
            ["M5Cardputer"]="esp32:esp32:esp32s3:PartitionScheme=min_spiffs,FlashSize=8M,PSRAM=disabled"
            ["ESP32-C5-DevKitC-1"]="esp32:esp32:esp32c5:PartitionScheme=min_spiffs"
            ["Generic ESP32"]="esp32:esp32:esp32:PartitionScheme=min_spiffs"
          )

          # Compile-time flag (-D...)
          declare -A DFLAG=(
            ["Flipper Zero WiFi Dev Board"]="MARAUDER_FLIPPER"
            ["Flipper Zero Multi Board S3"]="MARAUDER_MULTIBOARD_S3"
            ["OG Marauder"]="MARAUDER_V4"
            ["Marauder v6"]="MARAUDER_V6"
            ["Marauder v6.1"]="MARAUDER_V6_1"
            ["Marauder Kit"]="MARAUDER_KIT"
            ["Marauder Mini"]="MARAUDER_MINI"
            ["ESP32 LDDB"]="ESP32_LDDB"
            ["Marauder Dev Board Pro"]="MARAUDER_DEV_BOARD_PRO"
            ["M5StickCPlus"]="MARAUDER_M5STICKC"
            ["M5StickCPlus 2"]="MARAUDER_M5STICKCP2"
            ["Rev Feather"]="MARAUDER_REV_FEATHER"
            ["Marauder v7"]="MARAUDER_V7"
            ["Marauder CYD 2432S028"]="MARAUDER_CYD_MICRO"
            ["Marauder CYD 2432S024 GUITION"]="MARAUDER_CYD_GUITION"
            ["Marauder CYD 2432S028 2 USB"]="MARAUDER_CYD_2USB"
            ["Marauder v7.1"]="MARAUDER_V7_1"
            ["M5Cardputer"]="MARAUDER_CARDPUTER"
            ["ESP32-C5-DevKitC-1"]="MARAUDER_C5"
            ["Generic ESP32"]=""
          )

          # TFT and TFT header mapping
          declare -A TFT=(
            ["Flipper Zero WiFi Dev Board"]="false"
            ["Flipper Zero Multi Board S3"]="false"
            ["OG Marauder"]="true"
            ["Marauder v6"]="true"
            ["Marauder v6.1"]="true"
            ["Marauder Kit"]="true"
            ["Marauder Mini"]="true"
            ["ESP32 LDDB"]="false"
            ["Marauder Dev Board Pro"]="false"
            ["M5StickCPlus"]="true"
            ["M5StickCPlus 2"]="true"
            ["Rev Feather"]="true"
            ["Marauder v7"]="true"
            ["Marauder CYD 2432S028"]="true"
            ["Marauder CYD 2432S024 GUITION"]="true"
            ["Marauder CYD 2432S028 2 USB"]="true"
            ["Marauder v7.1"]="true"
            ["M5Cardputer"]="true"
            ["ESP32-C5-DevKitC-1"]="false"
            ["Generic ESP32"]="false"
          )

          declare -A TFTFILE=(
            ["OG Marauder"]="User_Setup_og_marauder.h"
            ["Marauder v6"]="User_Setup_og_marauder.h"
            ["Marauder v6.1"]="User_Setup_og_marauder.h"
            ["Marauder Kit"]="User_Setup_og_marauder.h"
            ["Marauder Mini"]="User_Setup_marauder_mini.h"
            ["M5StickCPlus"]="User_Setup_marauder_m5stickc.h"
            ["M5StickCPlus 2"]="User_Setup_marauder_m5stickcp2.h"
            ["Rev Feather"]="User_Setup_marauder_rev_feather.h"
            ["Marauder v7"]="User_Setup_dual_nrf24.h"
            ["Marauder CYD 2432S028"]="User_Setup_cyd_micro.h"
            ["Marauder CYD 2432S024 GUITION"]="User_Setup_cyd_guition.h"
            ["Marauder CYD 2432S028 2 USB"]="User_Setup_cyd_2usb.h"
            ["Marauder v7.1"]="User_Setup_dual_nrf24.h"
            ["M5Cardputer"]="User_Setup_marauder_m5cardputer.h"
          )

          # Per-board defaults (filesystem & partition) — feel free to tweak
          declare -A DFS=(
            ["Flipper Zero WiFi Dev Board"]="spiffs"
            ["Flipper Zero Multi Board S3"]="spiffs"
            ["OG Marauder"]="spiffs"
            ["Marauder v6"]="spiffs"
            ["Marauder v6.1"]="spiffs"
            ["Marauder Kit"]="spiffs"
            ["Marauder Mini"]="spiffs"
            ["ESP32 LDDB"]=""
            ["Marauder Dev Board Pro"]=""
            ["M5StickCPlus"]="spiffs"
            ["M5StickCPlus 2"]="spiffs"
            ["Rev Feather"]="spiffs"
            ["Marauder v7"]="spiffs"
            ["Marauder CYD 2432S028"]="spiffs"
            ["Marauder CYD 2432S024 GUITION"]="spiffs"
            ["Marauder CYD 2432S028 2 USB"]="spiffs"
            ["Marauder v7.1"]="spiffs"
            ["M5Cardputer"]="spiffs"
            ["ESP32-C5-DevKitC-1"]="spiffs"
            ["Generic ESP32"]=""
          )
          declare -A DPT=(
            ["Flipper Zero WiFi Dev Board"]="min_spiffs_ota.csv"
            ["Flipper Zero Multi Board S3"]="min_spiffs_ota.csv"
            ["OG Marauder"]="marauder_spiffs_ota.csv"
            ["Marauder v6"]="marauder_spiffs_ota.csv"
            ["Marauder v6.1"]="marauder_spiffs_ota.csv"
            ["Marauder Kit"]="marauder_spiffs_ota.csv"
            ["Marauder Mini"]="min_spiffs_ota.csv"
            ["ESP32 LDDB"]=""
            ["Marauder Dev Board Pro"]=""
            ["M5StickCPlus"]="min_spiffs_ota.csv"
            ["M5StickCPlus 2"]="min_spiffs_ota.csv"
            ["Rev Feather"]="min_spiffs_ota.csv"
            ["Marauder v7"]="marauder_spiffs_ota.csv"
            ["Marauder CYD 2432S028"]="min_spiffs_ota.csv"
            ["Marauder CYD 2432S024 GUITION"]="min_spiffs_ota.csv"
            ["Marauder CYD 2432S028 2 USB"]="min_spiffs_ota.csv"
            ["Marauder v7.1"]="marauder_spiffs_ota.csv"
            ["M5Cardputer"]="min_spiffs_ota.csv"
            ["ESP32-C5-DevKitC-1"]="min_spiffs_ota.csv"
            ["Generic ESP32"]=""
          )

          echo "fqbn=${FQBN[$sel]}" >> $GITHUB_OUTPUT
          echo "dflag=${DFLAG[$sel]}" >> $GITHUB_OUTPUT
          echo "tft=${TFT[$sel]}" >> $GITHUB_OUTPUT
          echo "tftfile=${TFTFILE[$sel]}" >> $GITHUB_OUTPUT
          echo "def_fs=${DFS[$sel]}" >> $GITHUB_OUTPUT
          echo "def_part=${DPT[$sel]}" >> $GITHUB_OUTPUT

      # ---------- Sketch ----------
      - name: Prepare Sketch Folder
        id: prep
        run: |
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          mkdir -p "$SKETCH_DIR"
          cp scaffold/*.ino "$SKETCH_DIR/esp32_marauder_rewired.ino"
          cp -r scaffold/* "$SKETCH_DIR/"
          # bring your root configs.h
          if [ -f "configs.h" ]; then
            cp "configs.h" "$SKETCH_DIR/configs.h"
          fi
          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT

      # ---------- Configure TFT_eSPI User_Setup_Select.h if TFT ----------
      - name: Configure TFT_eSPI header (if TFT board)
        if: steps.map.outputs.tft == 'true'
        run: |
          TE="$HOME/Arduino/libraries/TFT_eSPI"
          SEL="${{ steps.map.outputs.tftfile }}"
          if [ -n "$SEL" ]; then
            mkdir -p "$TE"
            echo "// Auto-generated by workflow" > "$TE/User_Setup_Select.h"
            echo "#include <${SEL}>" >> "$TE/User_Setup_Select.h"
            echo "Using TFT_eSPI setup: $SEL"
          else
            echo "TFT true but no header mapped; continuing."
          fi

      # ---------- Prepare filesystem/partition (merge defaults + overrides) ----------
      - name: Resolve FS/Partition (with overrides) and install CSV into core
        id: fs
        shell: bash
        run: |
          CORE_VER="${{ steps.core.outputs.core_ver }}"
          FS_DEF="${{ steps.map.outputs.def_fs }}"
          PART_DEF="${{ steps.map.outputs.def_part }}"
          FS_OVR="${{ github.event.inputs.filesystem }}"
          PART_OVR="${{ github.event.inputs.partition }}"

          FS_FINAL="$FS_DEF"
          [ -n "$FS_OVR" ] && FS_FINAL="$FS_OVR"

          PART_FINAL="$PART_DEF"
          [ -n "$PART_OVR" ] && PART_FINAL="$PART_OVR"

          echo "fs=$FS_FINAL" >> $GITHUB_OUTPUT
          echo "part=$PART_FINAL" >> $GITHUB_OUTPUT

          # If we have a partition name and a matching file under repo /partitions,
          # copy it into the ESP32 core's partitions folder so the name resolves.
          if [ -n "$PART_FINAL" ]; then
            SRC="${GITHUB_WORKSPACE}/partitions/$PART_FINAL"
            if [ -f "$SRC" ]; then
              DEST="$HOME/.arduino15/packages/esp32/hardware/esp32/${CORE_VER}/tools/partitions"
              mkdir -p "$DEST"
              cp "$SRC" "$DEST/$PART_FINAL"
              echo "Installed custom partition CSV to $DEST/$PART_FINAL"
            else
              echo "Custom partition CSV '$PART_FINAL' not found in repo /partitions; relying on core's copy (if any)."
            fi
          fi

      # ---------- Compile ----------
      - name: Compile (Arduino CLI)
        run: |
          FQBN="${{ steps.map.outputs.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          EXTRA="-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"

          FS="${{ steps.fs.outputs.fs }}"
          PART="${{ steps.fs.outputs.part }}"
          DFLAG="${{ steps.map.outputs.dflag }}"
          EXTRA_DEFS=""
          [ -n "$DFLAG" ] && EXTRA_DEFS="-D${DFLAG}"

          BUILD_FLAGS=""
          [ -n "$FS" ] && BUILD_FLAGS="$BUILD_FLAGS --build-property board_build.filesystem=$FS"
          [ -n "$PART" ] && BUILD_FLAGS="$BUILD_FLAGS --build-property board_build.partitions=$PART"

          echo "FQBN: $FQBN"
          echo "Final FS: $FS | Final PART: $PART | Extra defines: $EXTRA_DEFS"

          arduino-cli compile \
            --fqbn "$FQBN" \
            "$SKETCH_DIR" \
            --warnings none \
            --export-binaries \
            --build-property compiler.cpp.extra_flags="$EXTRA $EXTRA_DEFS" \
            --build-property compiler.c.extra_flags="$EXTRA $EXTRA_DEFS" \
            $BUILD_FLAGS

      # ---------- Artifact ----------
      - name: Safe artifact name
        id: art
        run: |
          NAME="fw_${{ github.event.inputs.board }}_${{ github.sha }}"
          SAFE=$(echo "$NAME" | sed 's/[:<>|*?\\\/ ]/_/g')
          echo "safe=$SAFE" >> $GITHUB_OUTPUT

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.art.outputs.safe }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14
