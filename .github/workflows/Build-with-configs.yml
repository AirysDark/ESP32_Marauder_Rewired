name: Build-with-configs (JSON)

on:
  workflow_dispatch:
    inputs:
      board_flag:
        description: "Board flag (default: MARAUDER_V7)"
        required: false
        default: "MARAUDER_V7"
      board_label:
        description: "Optional board_label override"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python deps
        run: |
          pip install --upgrade pip
          pip install pyserial


      - name: Debug repo layout
        run: |
          pwd
          ls -la
          ls -la scaffold || true
          ls -la scaffold/configs || true
          ls -la scaffold/configs/boards || true
          sed -n '1,120p' scaffold/configs/boards/boards_manifest.json || true

      - name: Export board env from JSON manifest
        run: |
          echo "BOARD_FLAG=${{ github.event.inputs.board_flag }}" >> $GITHUB_ENV
          echo "BOARD_LABEL=${{ github.event.inputs.board_label }}" >> $GITHUB_ENV
          python3 scaffold/tools/export_env_from_json.py >> $GITHUB_ENV 2>> exporter.err || true
          echo "----- exporter stderr -----"
          cat exporter.err || true

      - name: Ensure FLAG present (fallback to input or MARAUDER_V7)
        run: |
          if [ -z "$FLAG" ]; then
            if [ -n "${{ github.event.inputs.board_flag }}" ]; then
              echo "FLAG=${{ github.event.inputs.board_flag }}" >> $GITHUB_ENV
            else
              echo "FLAG=MARAUDER_V7" >> $GITHUB_ENV
            fi
          fi

      - name: Ensure FQBN set (fbqn fallback)
        run: |
          if [ -z "$FQBN" ]; then
            echo "::warning::FQBN empty; checking FBQN fallback"
            if [ -n "$FBQN" ]; then
              echo "FQBN=$FBQN" >> $GITHUB_ENV
            fi
          fi

      - name: Last-resort FQBN mapping (unblock MARAUDER_V7)
        run: |
          if [ -z "$FQBN" ]; then
            case "$FLAG" in
              MARAUDER_V7)   echo "FQBN=esp32:esp32:d32:PartitionScheme=min_spiffs" >> $GITHUB_ENV ;;
              MARAUDER_MINI) echo "FQBN=esp32:esp32:d32:PartitionScheme=min_spiffs" >> $GITHUB_ENV ;;
              *) echo "::error::FQBN not found for FLAG='$FLAG' and no fallback rule defined."; exit 1;;
            esac
            echo "::notice::Applied last-resort FQBN mapping for $FLAG"
          fi

      - name: Assert FQBN present
        run: |
          if [ -z "$FQBN" ]; then
            echo "::error::FQBN is empty after exporter+fallback ? check boards_manifest (fqbn/fbqn)."
            exit 1
          fi

      - name: Dump resolved env (debug)
        run: |
          env | sort | grep -E '^(FLAG|BOARD_LABEL|FQBN|CORE_VERSION|FILESYSTEM|PARTITION|ADDR|DISPLAY_|LIBS_)' || true

      # Always use a pinned CLI version (avoid "latest")
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2
        with:
          version: 0.35.3

      - name: Configure ESP32 board manager index
        run: |
          arduino-cli config init
          arduino-cli config set board_manager.additional_urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          arduino-cli core update-index --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json

      # Hard-pin the ESP32 core version (your rule)
      - name: Force core version 2.0.11
        run: echo "CORE_VERSION=2.0.11" >> $GITHUB_ENV

      - name: Install ESP32 core (with retry)
        run: |
          set -e
          for i in 1 2 3; do
            arduino-cli core install esp32:esp32@${CORE_VERSION} \
              --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json && break || {
                echo "Install attempt $i failed; retrying in 5s..."
                sleep 5
              }
          done
          arduino-cli core list

      - name: Clean conflicting libraries (XPT touch/TFT leftovers)
        run: |
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"
          cd "$LIBDIR"
          rm -rf XPT2049Touch XPT2046_Touchscreen TFT_eSPI || true

      - name: Install required libraries
        run: |
          set -e
          # Resolve names from manifest (handle both *_VERSION and *_VER keys)
          NIMBLE_VER="${LIBS_NIMBLE_VERSION:-$LIBS_NIMBLE_VER}"
          ESPASYNC_REPO="${LIBS_ESP_ASYNC_REPO:-bigbrodude6119/ESPAsyncWebServer}"
          ESPASYNC_VER="${LIBS_ESP_ASYNC_VERSION:-$LIBS_ESP_ASYNC_VER}"
          echo "Resolved: NIMBLE_VER='${NIMBLE_VER}'  ESPASYNC_REPO='${ESPASYNC_REPO}'  ESPASYNC_VER='${ESPASYNC_VER}'"
          # NimBLE ? avoid @ when empty to prevent CLI panic
          if [ -n "$NIMBLE_VER" ]; then
            arduino-cli lib install "NimBLE-Arduino@${NIMBLE_VER}"
          else
            echo "::warning::LIBS_NIMBLE_VERSION/VER empty; installing latest NimBLE-Arduino (no pin)."
            arduino-cli lib install NimBLE-Arduino
          fi
          # ESPAsyncWebServer from Git (repo+branch/tag)
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"
          cd "$LIBDIR"
          rm -rf ESPAsyncWebServer || true
          if [ -n "$ESPASYNC_VER" ]; then
            git clone --depth 1 --branch "$ESPASYNC_VER" "https://github.com/${ESPASYNC_REPO}" ESPAsyncWebServer
          else
            echo "::warning::LIBS_ESP_ASYNC_VERSION/VER empty; using default branch of ${ESPASYNC_REPO}."
            git clone --depth 1 "https://github.com/${ESPASYNC_REPO}" ESPAsyncWebServer
          fi

      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP

      ### STAGE & ASSERT THE SKETCH ###
      - name: Prepare Sketch Folder
        id: prep
        run: |
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          rm -rf "$SKETCH_DIR"; mkdir -p "$SKETCH_DIR"
          SRC_INO="$(ls scaffold/*.ino | head -n 1)"
          cp "$SRC_INO" "$SKETCH_DIR/esp32_marauder_rewired.ino"
          cp -r scaffold/* "$SKETCH_DIR/" || true
          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT

      - name: Assert sketch prepared
        run: |
          test -f "${{ steps.prep.outputs.sketch_dir }}/esp32_marauder_rewired.ino" || { echo "::error ::prepared .ino missing"; ls -la "${{ steps.prep.outputs.sketch_dir }}" || true; exit 1; }

      ### AUTOGEN HEADERS INTO THE PREPARED DIR ###
      - name: Generate config.h (JSON-driven)
        run: |
          python3 scaffold/tools/gen_user_config.py \
            --boards-json scaffold/configs/boards/boards_manifest.json \
            --defines-json scaffold/configs/defines/build_defines.json \
            --modules-json scaffold/configs/modules/modules_presets.json \
            --board-flag "$BOARD_FLAG" \
            --board-label "$BOARD_LABEL" \
            --out "${{ steps.prep.outputs.sketch_dir }}/.autogen/config.h"

      - name: Generate TFT_eSPI header (serial-only safe)
        run: |
          mkdir -p "${{ steps.prep.outputs.sketch_dir }}/.tft_setup"
          python3 scaffold/tools/gen_tft_setup_json.py \
            --boards-json scaffold/configs/boards/boards_manifest.json \
            --displays-json scaffold/configs/displays/display_presets.json \
            --pins-json scaffold/configs/pins/pin_presets.json \
            --board-label "$BOARD_LABEL" \
            --board-flag "$BOARD_FLAG" \
            --model "${DISPLAY_MODEL}" \
            --tft-enabled "${DISPLAY_ENABLED}" \
            --out-dir "${{ steps.prep.outputs.sketch_dir }}/.tft_setup"

      - name: Resolve FS/Partition and install custom CSV if present
        id: fs
        shell: bash
        run: |
          set -euo pipefail
          FS_IN="${FILESYSTEM:-}"
          PART_IN="${PARTITION:-}"
          CORE_VER="${CORE_VERSION:-2.0.11}"

          # Where the esp32 core keeps partition CSVs
          CORE_PART_DIR="$HOME/.arduino15/packages/esp32/hardware/esp32/${CORE_VER}/tools/partitions"

          FS="$FS_IN"
          PART="${PART_IN}"

          # Normalize: strip a trailing .csv once
          if [ -n "$PART" ]; then
            PART="${PART%.csv}.csv"
          fi

          # If a custom CSV exists in repo root ./partitions, copy it into the core
          if [ -n "$PART" ]; then
            SRC="${GITHUB_WORKSPACE}/partitions/$PART"
            if [ -f "$SRC" ]; then
              mkdir -p "$CORE_PART_DIR"
              cp -f "$SRC" "$CORE_PART_DIR/$PART"
              echo "Installed custom partition CSV to $CORE_PART_DIR/$PART"
            fi
          fi

          echo "fs=$FS"   >> $GITHUB_OUTPUT
          echo "partition=$PART" >> $GITHUB_OUTPUT

          echo "Filesystem: ${FS:-<core default>}"
          echo "Partition:  ${PART:-<core default>}"


      - name: Compile (Arduino CLI)
        working-directory: ${{ steps.prep.outputs.sketch_dir }}
        shell: bash
        env:
          EXTRA_INCLUDES: "-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"
          SKETCH_DIR: -I${{ steps.prep.outputs.sketch_dir }}/.tft_setup -I${{ steps.prep.outputs.sketch_dir }}/.autogen
        run: |
          set -euo pipefail

          # FQBN was asserted earlier; read it from env (not from a removed step)
          if [ -z "${FQBN:-}" ]; then
            echo "::error::FQBN is empty at compile time; check earlier steps."
            exit 1
          fi

          FS="${{ steps.fs.outputs.fs }}"
          PART="${{ steps.fs.outputs.partition }}"

          # Defines: exporter emits -D<FLAG> as DEFINES_BASE; also allow user-provided DEFINES
          DEFS_BASE="${DEFINES_BASE:-}"
          DEFS_EXTRA="${DEFINES:-}"
          DEFS="$(printf '%s %s' "$DEFS_BASE" "$DEFS_EXTRA" | xargs || true)"

          echo "FQBN:       $FQBN"
          echo "Sketch dir: $(pwd)"
          echo "Filesystem: ${FS:-<default>}"
          echo "Partition:  ${PART:-<default>}"
          echo "Defines:    ${DEFS:-<none>}"
          ls -la; ls -la .tft_setup || true; ls -la .autogen || true

          ARGS=()
          ARGS+=(--fqbn "$FQBN")
          ARGS+=(--warnings none)
          ARGS+=(--export-binaries)
          ARGS+=(--build-property "compiler.cpp.extra_flags=${EXTRA_INCLUDES} ${DEFS}")

          # Filesystem & partitions (guarded)
          if [ -n "$FS" ]; then
            ARGS+=(--build-property "board_build.filesystem=${FS}")
          fi
          if [ -n "$PART" ]; then
            # Arduino CLI wants the name without .csv
            PART_NAME="${PART%.csv}"
            ARGS+=(--build-property "build.partitions=${PART_NAME}")
          fi

          printf 'arduino-cli compile args:\n  %q\n' "${ARGS[@]}"
          arduino-cli compile "${ARGS[@]}" .

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: fw-${{ env.FLAG }}-${{ env.CORE_VERSION }}-${{ env.DISPLAY_MODEL || 'serial' }}
          path: build_out
