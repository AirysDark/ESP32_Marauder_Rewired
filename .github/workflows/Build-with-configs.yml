name: Build (Arduino CLI — ESP32 Marauder Rewired — manifest-driven)

on:
  workflow_dispatch:
    inputs:
      board_label:
        type: choice
        description: 'Select board (must match manifest.json)'
        default: 'OG Marauder'
        options:
          - Flipper Zero WiFi Dev Board
          - Flipper Zero Multi Board S3
          - OG Marauder
          - Marauder v6
          - Marauder v6.1
          - Marauder Kit
          - Marauder Mini
          - ESP32 LDDB
          - Marauder Dev Board Pro
          - M5StickCPlus
          - M5StickCPlus 2
          - Rev Feather
          - Marauder v7
          - Marauder CYD 2432S028
          - Marauder CYD 2432S024 GUITION
          - Marauder CYD 2432S028 2 USB
          - Marauder v7.1
          - M5Cardputer
          - ESP32-C5-DevKitC-1
          - Generic ESP32
      filesystem:
        type: choice
        description: 'Override filesystem (blank = use manifest default)'
        default: ''
        options: ['', 'spiffs', 'littlefs']
      partition:
        type: choice
        description: 'Override partition CSV from /partitions (blank = use manifest default)'
        default: ''
        options:
          - ''
          - hugeapp_1m_fs.csv
          - marauder_littlefs.csv
          - marauder_spiffs_ota.csv
          - min_littlefs_ota.csv
          - min_spiffs_ota.csv
          - ota_1m_fs.csv
      core_version:
        description: 'Arduino-ESP32 core version'
        required: false
        default: '2.0.11'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Load manifest and list available boards
        id: manifest
        shell: bash
        run: |
          set -e
          MAN=./scaffold/configs/manifest.json
          test -f "$MAN" || { echo "::error ::manifest.json not found at $MAN"; exit 1; }
          echo "Detected boards in manifest:"
          jq -r '.boards[].label' "$MAN" | nl -ba
          echo "man_path=$MAN" >> $GITHUB_OUTPUT

      - name: Resolve board from manifest
        id: map
        shell: bash
        run: |
          set -e
          MAN="${{ steps.manifest.outputs.man_path }}"
          WANT="${{ github.event.inputs.board_label }}"

          COUNT=$(jq --arg L "$WANT" '[.boards[] | select(.label == $L)] | length' "$MAN")
          if [ "$COUNT" -eq 0 ]; then
            echo "::error ::Board label not found in manifest: $WANT"
            echo "Available labels:"; jq -r '.boards[].label' "$MAN" | nl -ba
            exit 1
          fi

          FQBN=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .fqbn' "$MAN")
          TFT_ENABLED=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .tft.enabled // false' "$MAN")
          TFT_HEADER=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .tft.header // ""' "$MAN")
          DEF_FS=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .defaults.filesystem // ""' "$MAN")
          DEF_PART=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .defaults.partition // ""' "$MAN")
          DEFINES=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | (.defines // []) | map("-D"+.) | join(" ")' "$MAN")
          FLAG=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .flag // ""' "$MAN")
          if [ -n "$FLAG" ]; then DEFINES="$DEFINES -D$FLAG"; fi

          echo "fqbn=$FQBN"         >> $GITHUB_OUTPUT
          echo "tft_enabled=$TFT_ENABLED" >> $GITHUB_OUTPUT
          echo "tft_header=$TFT_HEADER"   >> $GITHUB_OUTPUT
          echo "def_fs=$DEF_FS"     >> $GITHUB_OUTPUT
          echo "def_part=$DEF_PART" >> $GITHUB_OUTPUT
          echo "defines=$DEFINES"   >> $GITHUB_OUTPUT

      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        id: core
        run: |
          CORE_VER="${{ github.event.inputs.core_version }}"
          echo "core_ver=$CORE_VER" >> $GITHUB_OUTPUT
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      - name: Extract pre-bundled libs (lib.tar)
        run: |
          mkdir -p $HOME/Arduino/libraries
          if [ -f lib.tar ]; then
            tar -xf lib.tar -C $HOME/Arduino/libraries
          else
            echo "lib.tar not found; continuing (build may fail without libs)."
          fi
          ls -1 $HOME/Arduino/libraries || true

      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP

      - name: Prepare Sketch Folder
        id: prep
        shell: bash
        run: |
          set -e
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          rm -rf "$SKETCH_DIR"
          mkdir -p "$SKETCH_DIR"

          if [ -f scaffold/esp32_marauder_rewired.ino ]; then
            SRC_INO="scaffold/esp32_marauder_rewired.ino"
          else
            SRC_INO="$(ls scaffold/*.ino | head -n 1)"
            if [ -z "$SRC_INO" ]; then
              echo "::error ::No .ino found under scaffold/"; exit 1
            fi
          fi
          echo "Using INO: $SRC_INO"
          cp "$SRC_INO" "$SKETCH_DIR/esp32_marauder_rewired.ino"

          pushd scaffold >/dev/null
          find . -type f ! -name '*.ino' -print0 \
            | xargs -0 -I {} bash -c 'mkdir -p "'"$SKETCH_DIR"'"/$(dirname "{}"); cp "{}" "'"$SKETCH_DIR"'"/"{}"'
          popd >/dev/null

          if [ -f "configs.h" ]; then
            cp "configs.h" "$SKETCH_DIR/configs.h"
          fi

          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          echo "Top-level sketch contents:"
          find "$SKETCH_DIR" -maxdepth 2 -type f | sort

      - name: Apply TFT header override
        if: steps.map.outputs.tft_enabled == 'true' && steps.map.outputs.tft_header != ''
        run: |
          cp "scaffold/display/${{ steps.map.outputs.tft_header }}" \
             "${{ steps.prep.outputs.sketch_dir }}/User_Setup.h"

      - name: Resolve FS/Partition
        id: fs
        run: |
          FS_INPUT="${{ github.event.inputs.filesystem }}"
          PART_INPUT="${{ github.event.inputs.partition }}"
          FS="${FS_INPUT:-${{ steps.map.outputs.def_fs }}}"
          PART="${PART_INPUT:-${{ steps.map.outputs.def_part }}}"
          echo "fs=$FS" >> $GITHUB_OUTPUT
          echo "partition=$PART" >> $GITHUB_OUTPUT

      # -------------------- PATCHED COMPILE BLOCK --------------------
      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          set -e
          FQBN="${{ steps.map.outputs.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          DEFS="${{ steps.map.outputs.defines }}"
          EXTRA_INCLUDES="-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"
          FS="${{ steps.fs.outputs.fs }}"
          PART="${{ steps.fs.outputs.partition }}"

          # Build properties (wrap -D flags inside compiler.*.extra_flags)
          PROPS="--build-property compiler.cpp.extra_flags=\"$EXTRA_INCLUDES $DEFS\" \
                 --build-property compiler.c.extra_flags=\"$EXTRA_INCLUDES $DEFS\""

          # Filesystem override
          [ -n "$FS" ] && PROPS="$PROPS --build-property board_build.filesystem=$FS"

          # Partition override (copy CSV and set build.partitions to basename)
          if [ -n "$PART" ]; then
            mkdir -p "$SKETCH_DIR/partitions"
            if [ -f "partitions/$PART" ]; then
              cp -f "partitions/$PART" "$SKETCH_DIR/partitions/"
            fi
            NAME_ONLY="${PART%.csv}"
            PROPS="$PROPS --build-property build.partitions=$NAME_ONLY"
          fi

          echo "FQBN: $FQBN"
          echo "Filesystem: ${FS:-<default>}"
          echo "Partition:  ${PART:-<default>}"
          echo "Props: $PROPS"

          arduino-cli compile \
            --fqbn "$FQBN" \
            "$SKETCH_DIR" \
            --warnings none \
            --export-binaries \
            $PROPS
      # --------------------------------------------------------------

      - name: Sanitize firmware artifact name
        id: sanitize_fw
        run: |
          NAME="firmware_${{ github.event.inputs.board_label }}_${{ github.sha }}"
          SAFE_NAME=$(echo "$NAME" | sed 's/[:<>|*?\\\/]/_/g')
          echo "safe_name=$SAFE_NAME" >> $GITHUB_OUTPUT

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.sanitize_fw.outputs.safe_name }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14
```0