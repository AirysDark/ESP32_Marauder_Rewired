name: Build (Arduino CLI — ESP32 Marauder Rewired)

on:
  workflow_dispatch:
    inputs:
      board:
        description: 'Select board'
        required: true
        type: choice
        options:
          - Generic ESP32
          - ESP32-S2
          - ESP32-S3
          - DOIT DevKit D32
          - M5StickC / M5StickC-Plus (base)
        default: 'ESP32-S3'

      core_version:
        description: 'Arduino-ESP32 core (e.g., 2.0.11)'
        required: false
        default: '2.0.11'

      # ↓↓↓ Hard-coded dropdown of configs in scaffold/configs ↓↓↓
      config_name:
        description: 'Config in scaffold/configs'
        required: true
        type: choice
        options:
          - marauder_mini.json
          - marauder_v6.json
          - marauder_v6_1.json
          - marauder_kit.json
          - marauder_v7.json
          - m5stickc_plus.json
          - m5stickc_plus2.json
          - m5cardputer.json
          - esp32c5devkitc1.json
          - old_hardware.json
          - rev_feather.json
          - cyd_2432S028.json
          - cyd_2432S024_guition.json
          - cyd_2432S028_2usb.json
          - marauder_dev_board_pro.json
          - esp32_lddb.json
        default: 'marauder_mini.json'

      custom_config_json:
        description: 'Optional JSON to override the selected config (leave blank to use selected file)'
        required: false
        default: ''

      filesystem:
        description: 'Filesystem define (blank = sketch default)'
        required: false
        type: choice
        options: [ '', spiffs, littlefs ]
        default: ''

      partition_csv:
        description: 'Partition CSV under ./partitions (blank = core default)'
        required: false
        type: choice
        options:
          - ''
          - hugeapp_1m_fs.csv
          - marauder_littlefs.csv
          - marauder_spiffs_ota.csv
          - min_littlefs_ota.csv
          - min_spiffs_ota.csv
          - ota_1m_fs.csv
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        env:
          CORE_VER: ${{ inputs.core_version }}
        run: |
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      - name: Download & Extract lib.tar
        run: |
          mkdir -p "$HOME/Arduino/libraries"
          echo "Downloading lib.tar from repo..."
          curl -L "https://github.com/AirysDark/ESP32_Marauder_Rewired/raw/main/lib.tar" -o lib.tar
          tar -xf lib.tar -C "$HOME/Arduino/libraries"
          echo "Libraries installed to $HOME/Arduino/libraries"
          ls -la "$HOME/Arduino/libraries"

      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP

      - name: Select config (file or custom JSON)
        id: cfg
        shell: bash
        run: |
          set -e
          mkdir -p scaffold/data scaffold/configs
          if [ -n "${{ inputs.custom_config_json }}" ]; then
            echo "${{ inputs.custom_config_json }}" > scaffold/configs/custom.json
            CONFIG_FILE="custom.json"
          else
            CONFIG_FILE="${{ inputs.config_name }}"
          fi
          if [ ! -f "scaffold/configs/$CONFIG_FILE" ]; then
            echo "Configs present:"; ls -1 scaffold/configs || true
            echo "::error ::Config not found: scaffold/configs/$CONFIG_FILE"
            exit 1
          fi
          cp "scaffold/configs/$CONFIG_FILE" scaffold/data/config.json
          echo "config_file=$CONFIG_FILE" >> $GITHUB_OUTPUT

      - name: Prepare Sketch Folder (from scaffold/)
        id: prep
        shell: bash
        run: |
          set -e
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          mkdir -p "$SKETCH_DIR"

          INO_SRC=$(ls scaffold/*.ino | head -n 1)
          [ -n "$INO_SRC" ] || (echo "No .ino found at scaffold/ root"; exit 1)
          cp "$INO_SRC" "$SKETCH_DIR/esp32_marauder_rewired.ino"

          pushd scaffold >/dev/null
          find . -type f \( -name "*.h" -o -name "*.hpp" -o -name "*.c" -o -name "*.cpp" -o -name "*.json" \) -print0 \
            | xargs -0 -I {} cp --parents "{}" "$SKETCH_DIR/"
          popd >/dev/null

          if [ -n "${{ inputs.partition_csv }}" ]; then
            SRC="partitions/${{ inputs.partition_csv }}"
            if [ ! -f "$SRC" ]; then
              echo "Partitions present:"; ls -1 partitions || true
              echo "::error ::Partition CSV not found: $SRC"
              exit 1
            fi
            cp "$SRC" "$SKETCH_DIR/partitions.csv"
            echo "Using custom partition table: $SRC -> $SKETCH_DIR/partitions.csv"
          fi

          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT

      - name: Map board name to FQBN
        id: boardmap
        shell: bash
        run: |
          set -e
          case "${{ inputs.board }}" in
            "Generic ESP32")                          FQBN="esp32:esp32:esp32" ;;
            "ESP32-S2")                               FQBN="esp32:esp32:esp32s2" ;;
            "ESP32-S3")                               FQBN="esp32:esp32:esp32s3" ;;
            "DOIT DevKit D32")                        FQBN="esp32:esp32:d32" ;;
            "M5StickC / M5StickC-Plus (base)")        FQBN="esp32:esp32:m5stick-c" ;;
            *) echo "::error ::Unknown board '${{ inputs.board }}'"; exit 1 ;;
          esac
          echo "fqbn=$FQBN" >> $GITHUB_OUTPUT
          echo "Resolved FQBN: $FQBN"

      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          set -e
          FQBN="${{ steps.boardmap.outputs.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"

          # Optional filesystem define (blank -> no define)
          FSDEF=""
          case "${{ inputs.filesystem }}" in
            littlefs|LITTLEFS) FSDEF="-DFS_LITTLEFS=1" ;;
            spiffs|SPIFFS)     FSDEF="-DFS_SPIFFS=1" ;;
            "")                FSDEF="" ;;
            *) echo "::error ::Unsupported filesystem: ${{ inputs.filesystem }}"; exit 1 ;;
          esac

          EXTRA_INCL="-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"

          echo "FQBN: $FQBN"
          echo "FS define: '$FSDEF'"

          arduino-cli compile \
            --fqbn "$FQBN" \
            "$SKETCH_DIR" \
            --warnings none \
            --export-binaries \
            --build-property compiler.cpp.extra_flags="$EXTRA_INCL $FSDEF" \
            --build-property compiler.c.extra_flags="$EXTRA_INCL $FSDEF"

      - name: Sanitize firmware artifact name
        id: sanitize_fw
        run: |
          NAME="fw_${{ inputs.board }}_${{ inputs.config_name }}_${{ inputs.filesystem || 'defaultfs' }}_${{ inputs.partition_csv || 'defaultpart' }}_${{ github.sha }}"
          SAFE_NAME=$(echo "$NAME" | sed 's/[:<>|*?\\\/]/_/g' | tr ' ' '_')
          echo "safe_name=$SAFE_NAME" >> $GITHUB_OUTPUT

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.sanitize_fw.outputs.safe_name }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14
