name: Build (Arduino CLI — ESP32 Marauder Rewired — Board→Config, TFT, Filesystem)

on:
  workflow_dispatch:
    inputs:
      board:
        type: choice
        description: "Target board"
        default: "Generic ESP32"
        options:
          - Generic ESP32
          - Flipper Zero WiFi Dev Board
          - Flipper Zero Multi Board S3
          - OG Marauder
          - Marauder v6
          - Marauder v6.1
          - Marauder Kit
          - Marauder Mini
          - ESP32 LDDB
          - Marauder Dev Board Pro
          - M5StickCPlus
          - M5StickCPlus 2
          - Rev Feather
          - Marauder v7
          - Marauder CYD 2432S028
          - Marauder CYD 2432S024 GUITION
          - Marauder CYD 2432S028 2 USB
          - Marauder v7.1
          - M5Cardputer
          - ESP32-C5-DevKitC-1
      filesystem:
        type: choice
        description: "Filesystem override (blank = use core/default)"
        default: ""
        options: ["", "spiffs", "littlefs"]
      partition:
        type: choice
        description: "Partition CSV from /partitions (blank = default)"
        default: ""
        options:
          - ""
          - hugeapp_1m_fs.csv
          - marauder_littlefs.csv
          - marauder_spiffs_ota.csv
          - min_littlefs_ota.csv
          - min_spiffs_ota.csv
          - ota_1m_fs.csv
      core_version:
        description: "Arduino-ESP32 core version"
        required: false
        default: "2.0.11"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # ---- Arduino CLI ----
      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        run: |
          CORE_VER="${{ github.event.inputs.core_version }}"
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      # ---- Libraries from your prepacked tar (fast & deterministic) ----
      - name: Extract pre-bundled libs (lib.tar)
        run: |
          mkdir -p $HOME/Arduino/libraries
          tar -xf lib.tar -C $HOME/Arduino/libraries
          echo "User libs:"; ls -1 $HOME/Arduino/libraries

      # ---- Local registry shim so <registry/ToolRegistry.h> resolves ----
      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP
          find "$LIBDIR" -maxdepth 3 -type f -print

      # ---- Unpack your display headers (TFT_eSPI User_Setups) ----
      # Put the ZIP at repo root as 'display_settings.zip'
      - name: Unpack display settings
        run: |
          if [ -f "display_settings.zip" ]; then
            mkdir -p "$HOME/Arduino/libraries/TFT_eSPI"
            unzip -o "display_settings.zip" -d "$HOME/Arduino/libraries/TFT_eSPI" >/dev/null
            echo "Unpacked display headers into TFT_eSPI"
          else
            echo "display_settings.zip not found; skipping"
          fi

      # ---- Resolve board → FQBN (+ opts) and TFT header ----
      - name: Resolve board mapping
        id: map
        shell: bash
        run: |
          sel="${{ github.event.inputs.board }}"

          # FQBNs copied from your matrix (with options preserved)
          declare -A FQBN=(
            ["Flipper Zero WiFi Dev Board"]="esp32:esp32:esp32s2:PartitionScheme=min_spiffs,FlashSize=4M,PSRAM=enabled"
            ["Flipper Zero Multi Board S3"]="esp32:esp32:esp32s3:PartitionScheme=min_spiffs,FlashSize=4M"
            ["OG Marauder"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder v6"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder v6.1"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder Kit"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder Mini"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["ESP32 LDDB"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder Dev Board Pro"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["M5StickCPlus"]="esp32:esp32:m5stick-c:PartitionScheme=min_spiffs"
            ["M5StickCPlus 2"]="esp32:esp32:m5stick-c:PartitionScheme=min_spiffs"
            ["Rev Feather"]="esp32:esp32:esp32s2:PartitionScheme=min_spiffs,FlashSize=4M,PSRAM=enabled"
            ["Marauder v7"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder CYD 2432S028"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder CYD 2432S024 GUITION"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder CYD 2432S028 2 USB"]="esp32:esp32:d32:PartitionScheme=min_spiffs"
            ["Marauder v7.1"]="esp32:esp32:dfrobot_firebeetle2_esp32e:FlashSize=16M,PartitionScheme=min_spiffs,PSRAM=enabled"
            ["M5Cardputer"]="esp32:esp32:esp32s3:PartitionScheme=min_spiffs,FlashSize=8M,PSRAM=disabled"
            ["ESP32-C5-DevKitC-1"]="esp32:esp32:esp32c5:PartitionScheme=min_spiffs"
            ["Generic ESP32"]="esp32:esp32:esp32:PartitionScheme=min_spiffs"
          )

          # Whether TFT is used and which header to include
          declare -A TFTFLAG=(
            ["Flipper Zero WiFi Dev Board"]="false"
            ["Flipper Zero Multi Board S3"]="false"
            ["OG Marauder"]="true"
            ["Marauder v6"]="true"
            ["Marauder v6.1"]="true"
            ["Marauder Kit"]="true"
            ["Marauder Mini"]="true"
            ["ESP32 LDDB"]="false"
            ["Marauder Dev Board Pro"]="false"
            ["M5StickCPlus"]="true"
            ["M5StickCPlus 2"]="true"
            ["Rev Feather"]="true"
            ["Marauder v7"]="true"
            ["Marauder CYD 2432S028"]="true"
            ["Marauder CYD 2432S024 GUITION"]="true"
            ["Marauder CYD 2432S028 2 USB"]="true"
            ["Marauder v7.1"]="true"
            ["M5Cardputer"]="true"
            ["ESP32-C5-DevKitC-1"]="false"
            ["Generic ESP32"]="false"
          )

          declare -A TFTFILE=(
            ["OG Marauder"]="User_Setup_og_marauder.h"
            ["Marauder v6"]="User_Setup_og_marauder.h"
            ["Marauder v6.1"]="User_Setup_og_marauder.h"
            ["Marauder Kit"]="User_Setup_og_marauder.h"
            ["Marauder Mini"]="User_Setup_marauder_mini.h"
            ["M5StickCPlus"]="User_Setup_marauder_m5stickc.h"
            ["M5StickCPlus 2"]="User_Setup_marauder_m5stickcp2.h"
            ["Rev Feather"]="User_Setup_marauder_rev_feather.h"
            ["Marauder v7"]="User_Setup_dual_nrf24.h"
            ["Marauder CYD 2432S028"]="User_Setup_cyd_micro.h"
            ["Marauder CYD 2432S024 GUITION"]="User_Setup_cyd_guition.h"
            ["Marauder CYD 2432S028 2 USB"]="User_Setup_cyd_2usb.h"
            ["Marauder v7.1"]="User_Setup_dual_nrf24.h"
            ["M5Cardputer"]="User_Setup_marauder_m5cardputer.h"
          )

          echo "fqbn=${FQBN[$sel]}" >> $GITHUB_OUTPUT
          echo "tft=${TFTFLAG[$sel]}" >> $GITHUB_OUTPUT
          echo "tftfile=${TFTFILE[$sel]}" >> $GITHUB_OUTPUT

      # ---- Prepare sketch (bring in your configs.h & scaffold) ----
      - name: Prepare Sketch Folder
        id: prep
        run: |
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          mkdir -p "$SKETCH_DIR"
          # pick your main .ino from scaffold root
          cp scaffold/*.ino "$SKETCH_DIR/esp32_marauder_rewired.ino"
          cp -r scaffold/* "$SKETCH_DIR/"

          # Ensure configs.h is present at sketch root (from repo root)
          if [ -f "configs.h" ]; then
            cp "configs.h" "$SKETCH_DIR/configs.h"
          fi

          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT

      # ---- If TFT enabled, force User_Setup_Select.h to include chosen header ----
      - name: Configure TFT_eSPI header (if TFT board)
        if: steps.map.outputs.tft == 'true'
        run: |
          TE="$HOME/Arduino/libraries/TFT_eSPI"
          SEL="${{ steps.map.outputs.tftfile }}"
          if [ -z "$SEL" ]; then
            echo "No TFT header specified; skipping"
            exit 0
          fi
          # Create/patch User_Setup_Select.h to include the selected header
          mkdir -p "$TE"
          SELECT="$TE/User_Setup_Select.h"
          echo "// Auto-generated by workflow" > "$SELECT"
          echo "#include <${SEL}>" >> "$SELECT"
          echo "Using TFT_eSPI setup: $SEL"
          # Show files for debug
          ls -la "$TE" | sed -n '1,120p'

      # ---- Compile ----
      - name: Compile (Arduino CLI)
        run: |
          FQBN="${{ steps.map.outputs.fqbn }}"
          FS="${{ github.event.inputs.filesystem }}"
          PART="${{ github.event.inputs.partition }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          EXTRA="-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"

          BUILD_FLAGS=""
          # Apply overrides only if user selected something
          [ -n "$FS" ] && BUILD_FLAGS="$BUILD_FLAGS --build-property board_build.filesystem=$FS"
          [ -n "$PART" ] && BUILD_FLAGS="$BUILD_FLAGS --build-property board_build.partitions=$PART"

          echo "FQBN: $FQBN"
          echo "Overrides: FS=$FS PART=$PART"
          arduino-cli compile \
            --fqbn "$FQBN" \
            "$SKETCH_DIR" \
            --warnings none \
            --export-binaries \
            --build-property compiler.cpp.extra_flags="$EXTRA" \
            --build-property compiler.c.extra_flags="$EXTRA" \
            $BUILD_FLAGS

      # ---- Upload firmware ----
      - name: Name-safe firmware artifact
        id: namefw
        run: |
          NAME="fw_${{ github.event.inputs.board }}_${{ github.sha }}"
          SAFE=$(echo "$NAME" | sed 's/[:<>|*?\\\/ ]/_/g')
          echo "safe=$SAFE" >> $GITHUB_OUTPUT

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.namefw.outputs.safe }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14
