name: Build (Arduino CLI — ESP32 Marauder Rewired — manifest-driven)

on:
  workflow_dispatch:
    inputs:
      board_label:
        type: choice
        description: 'Select board (must match manifest.json)'
        default: 'OG Marauder'
        options:
          - Flipper Zero WiFi Dev Board
          - Flipper Zero Multi Board S3
          - OG Marauder
          - Marauder v6
          - Marauder v6.1
          - Marauder Kit
          - Marauder Mini
          - ESP32 LDDB
          - Marauder Dev Board Pro
          - M5StickCPlus
          - M5StickCPlus 2
          - Rev Feather
          - Marauder v7
          - Marauder CYD 2432S028
          - Marauder CYD 2432S024 GUITION
          - Marauder CYD 2432S028 2 USB
          - Marauder v7.1
          - M5Cardputer
          - ESP32-C5-DevKitC-1
          - Generic ESP32 Dev Module
      filesystem:
        type: choice
        description: 'Override filesystem (blank = use manifest default)'
        default: ''
        options: ['', 'spiffs', 'littlefs']
      partition:
        type: choice
        description: 'Override partition CSV (pretty names) ? blank uses manifest default'
        default: 'Default (use manifest)'
        options:
          - 'Default (use manifest)'
          - 'Huge App + 1MB FS (hugeapp_1m_fs.csv)'
          - 'Marauder (LittleFS OTA) (marauder_littlefs.csv)'
          - 'Marauder (SPIFFS OTA) (marauder_spiffs_ota.csv)'
          - 'Minimal (LittleFS OTA) (min_littlefs_ota.csv)'
          - 'Minimal (SPIFFS OTA) (min_spiffs_ota.csv)'
          - 'OTA + 1MB FS (ota_1m_fs.csv)'
          - 'Marauder Default (marauder_default.csv)'
      core_version:
        description: 'Arduino-ESP32 core version'
        required: false
        default: 'auto'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true
          
      - name: Install jq + unzip
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Resolve board from manifest (CSV only)
        id: map
        shell: bash
        run: |
          set -euo pipefail
          MAN="${{ steps.manifest.outputs.man_path }}"
          WANT="${{ matrix.board_label }}"
      
          # Find row matching board_label
          LINE=$(awk -F',' -v want="$WANT" 'NR>1 && $1==want {print; exit}' "$MAN")
      
          if [ -z "$LINE" ]; then
            echo "::error ::Board label not found in manifest: $WANT"
            echo "Available labels:"; tail -n +2 "$MAN" | cut -d',' -f1 | nl -ba
            exit 1
          fi
      
          # Extract fields (assumes CSV header order)
          FQBN=$(echo "$LINE"         | cut -d',' -f2)
          FLAG=$(echo "$LINE"         | cut -d',' -f3)
          DEF_FS=$(echo "$LINE"       | cut -d',' -f4)
          DEF_PART=$(echo "$LINE"     | cut -d',' -f5)
          PROFILE=$(echo "$LINE"      | cut -d',' -f6)
          TFT_ENABLED=$(echo "$LINE"  | cut -d',' -f7)
          TFT_HEADER=$(echo "$LINE"   | cut -d',' -f8)
          DEFINES=$(echo "$LINE"      | cut -d',' -f9- | cut -d',' -f1 | tr ';' ' ' | xargs || true)
          CORE_VER=$(echo "$LINE"     | awk -F',' '{print $NF}')
      
          if [ -n "$FLAG" ]; then DEFINES="$DEFINES -D$FLAG"; fi
      
          echo "fqbn=$FQBN"               >> $GITHUB_OUTPUT
          echo "tft_enabled=$TFT_ENABLED" >> $GITHUB_OUTPUT
          echo "tft_header=$TFT_HEADER"   >> $GITHUB_OUTPUT
          echo "def_fs=$DEF_FS"           >> $GITHUB_OUTPUT
          echo "def_part=$DEF_PART"       >> $GITHUB_OUTPUT
          echo "defines=$DEFINES"         >> $GITHUB_OUTPUT
          echo "core_ver=$CORE_VER"       >> $GITHUB_OUTPUT
      
          echo "---- RESOLVED BOARD ----"
          echo "Board:        $WANT"
          echo "FQBN:         $FQBN"
          echo "Core Ver:     $CORE_VER"
          echo "TFT Enabled:  $TFT_ENABLED"
          echo "TFT Header:   $TFT_HEADER"
          echo "Default FS:   ${DEF_FS:-<core default>}"
          echo "Default Part: ${DEF_PART:-<core default>}"
          echo "Defines:      ${DEFINES:-<none>}"
          echo "------------------------"
      
      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        id: core
        run: |
          CORE_INPUT="${{ github.event.inputs.core_version }}"
          if [ "$CORE_INPUT" = "Auto" ] || [ -z "$CORE_INPUT" ]; then
            CORE_VER="${{ steps.map.outputs.core_ver }}"
          else
            CORE_VER="$CORE_INPUT"
          fi

          echo "core_ver=$CORE_VER" >> $GITHUB_OUTPUT
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
      
      - name: Clean conflicting libs
        run: |
          rm -rf "$HOME/Arduino/libraries/XPT2046_Touchscreen" || true
          rm -rf "$HOME/Arduino/libraries/TFT_eSPI" || true
          echo "Removed conflicting TFT/Touch libraries"
          
      - name: Extract pre-bundled libs (CSV-driven from scaffold/lib)
        shell: bash
        run: |
          set -euo pipefail
          CSV="scaffold/configs/lib_list.csv"
          ZIPROOT="scaffold/lib"
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"

          if [ ! -f "$CSV" ]; then
            echo "::error ::$CSV not found"; exit 1
          fi

          while IFS=',' read -r ZIP DESC; do
            [[ "$ZIP" =~ ^# ]] && continue
            ZIP=$(echo "$ZIP" | xargs)   # trim
            DESC=$(echo "$DESC" | xargs)
            [ -z "$ZIP" ] && continue

            FILE="$ZIPROOT/$ZIP"
            if [ -f "$FILE" ]; then
              echo "Unpacking $ZIP ($DESC)"
              unzip -o "$FILE" -d "$LIBDIR" >/dev/null
            else
              echo "WARNING: $ZIP not found in $ZIPROOT, skipping ($DESC)"
            fi
          done < "$CSV"

          echo "Installed libs in $LIBDIR:"
          ls -lh "$LIBDIR"

      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP

      - name: Unpack display settings (optional)
        run: |
          if [ -f "display_settings.zip" ]; then
            mkdir -p "$HOME/Arduino/libraries/TFT_eSPI"
            unzip -o "display_settings.zip" -d "$HOME/Arduino/libraries/TFT_eSPI" >/dev/null
            echo "Unpacked TFT_eSPI headers"
          else
            echo "display_settings.zip not present; skipping"
          fi

      - name: Prepare Sketch Folder
        id: prep
        shell: bash
        run: |
          set -e
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          rm -rf "$SKETCH_DIR"
          mkdir -p "$SKETCH_DIR"

          if [ -f scaffold/esp32_marauder_rewired.ino ]; then
            SRC_INO="scaffold/esp32_marauder_rewired.ino"
          else
            SRC_INO="$(ls scaffold/*.ino | head -n 1)"
            [ -n "$SRC_INO" ] || (echo "::error ::No .ino found under scaffold/"; exit 1)
          fi
          echo "Using INO: $SRC_INO"
          cp "$SRC_INO" "$SKETCH_DIR/esp32_marauder_rewired.ino"

          pushd scaffold >/dev/null
          find . -type f ! -name '*.ino' -print0 \
            | xargs -0 -I {} bash -c 'mkdir -p "'"$SKETCH_DIR"'"/$(dirname "{}"); cp "{}" "'"$SKETCH_DIR"'"/"{}"'
          popd >/dev/null

          [ -f "configs.h" ] && cp "configs.h" "$SKETCH_DIR/configs.h"

          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          find "$SKETCH_DIR" -maxdepth 2 -type f | sort

      - name: Resolve modules
        id: mods
        shell: bash
        run: |
          set -euo pipefail
          PRESETS="scaffold/configs/modules_presets.csv"
          CHOICE="${{ github.event.inputs.profile_name }}"
          CUSTOM="${{ github.event.inputs.modules_csv }}"
          if [ "$CHOICE" = "Custom" ]; then
            echo "csv=$CUSTOM" >> $GITHUB_OUTPUT; exit 0
          fi
          if [ ! -f "$PRESETS" ]; then
            echo "::error ::$PRESETS not found"; exit 1
          fi
          LINE=$(awk -F',' -v want="$CHOICE" 'tolower($1)==tolower(want){$1="";sub(/^,/, "");print;exit}' "$PRESETS")
          echo "csv=$LINE" >> $GITHUB_OUTPUT

      - name: Apply TFT header (library-level)
        if: steps.map.outputs.tft_enabled == 'true' && steps.map.outputs.tft_header != ''
        run: |
          # Define the base directory for the extracted display settings
          DISPLAY_SETTINGS_DIR="$HOME/Arduino/libraries/TFT_eSPI/User_Setups"
          
          # Ensure the directory exists
          mkdir -p "$DISPLAY_SETTINGS_DIR"
          
          # Construct the filename based on the board label
          BOARD_LABEL="${{ matrix.board_label }}"
          USER_SETUP_FILE="User_Setup_${BOARD_LABEL}.h"
          
          # Check if the specific User Setup file exists
          if [ -f "$DISPLAY_SETTINGS_DIR/$USER_SETUP_FILE" ]; then
            echo "// Auto-generated by workflow" > "$DISPLAY_SETTINGS_DIR/User_Setup_Select.h"
            echo "#include \"$USER_SETUP_FILE\"" >> "$DISPLAY_SETTINGS_DIR/User_Setup_Select.h"
            echo "Applied TFT header: $USER_SETUP_FILE"
          else
            echo "::error ::User setup file $USER_SETUP_FILE not found in $DISPLAY_SETTINGS_DIR"
            exit 1
          fi

      - name: Resolve FS/Partition
        id: fs
        shell: bash
        run: |
          set -euo pipefail
          FS_INPUT="${{ github.event.inputs.filesystem }}"
          PART_INPUT_RAW="${{ github.event.inputs.partition }}"

          # Map pretty label -> actual CSV filename (if present)
          part_from_pretty () {
            local s="$1"
            # Default selection means "use manifest"
            if [ -z "$s" ] || [ "$s" = "Default (use manifest)" ]; then
              echo ""
              return
            fi

            # If it looks like "... (filename.csv)" extract filename without regex
            case "$s" in
              *"("*.csv")"*)
                local tmp="${s##*(}"   # strip everything up to last "("
                tmp="${tmp%)}"        # strip trailing ")"
                echo "$tmp"
                ;;
              *)
                # Fallback: assume user typed a raw filename
                echo "$s"
                ;;
            esac
          }

          PART_INPUT="$(part_from_pretty "$PART_INPUT_RAW")"

          # Prefer user input; otherwise manifest defaults resolved earlier
          FS="${FS_INPUT:-${{ steps.map.outputs.def_fs }}}"
          if [ -n "$PART_INPUT" ]; then
            PART="$PART_INPUT"
          else
            PART="${{ steps.map.outputs.def_part }}"
          fi

          echo "fs=$FS" >> $GITHUB_OUTPUT
          echo "partition=$PART" >> $GITHUB_OUTPUT

          # If a custom partition CSV is referenced, install it into the core (optional convenience)
          if [ -n "$PART" ]; then
            SRC="${GITHUB_WORKSPACE}/partitions/$PART"
            DEST="$HOME/.arduino15/packages/esp32/hardware/esp32/${{ github.event.inputs.core_version }}/tools/partitions"
            if [ -f "$SRC" ]; then
              mkdir -p "$DEST"
              cp -f "$SRC" "$DEST/$PART"
              echo "Installed custom partition CSV to $DEST/$PART"
            else
              echo "Partition CSV '$PART' not found in repo /partitions; relying on core's copy (if any)."
            fi
          fi
          
      # ---------- PATCHED: array-based args to preserve -D flags ----------
      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          set -euo pipefail
          FQBN="${{ steps.map.outputs.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          DEFS="${{ steps.map.outputs.defines }}"
          EXTRA_INCLUDES="-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"
          FS="${{ steps.fs.outputs.fs }}"
          PART="${{ steps.fs.outputs.partition }}"

          echo "FQBN: $FQBN"
          echo "Filesystem: ${FS:-<default>}"
          echo "Partition:  ${PART:-<default>}"
          echo "EXTRA_INCLUDES: $EXTRA_INCLUDES"
          echo "DEFINES: $DEFS"

          CPP_FLAGS="$EXTRA_INCLUDES $DEFS"
          C_FLAGS="$EXTRA_INCLUDES $DEFS"

          ARGS=()
          ARGS+=(--fqbn "$FQBN")
          ARGS+=(--warnings none)
          ARGS+=(--export-binaries)
          ARGS+=(--build-property "compiler.cpp.extra_flags=$CPP_FLAGS")
          ARGS+=(--build-property "compiler.c.extra_flags=$C_FLAGS")

          if [ -n "$FS" ]; then
            ARGS+=(--build-property "board_build.filesystem=$FS")
          fi

          if [ -n "$PART" ]; then
            mkdir -p "$SKETCH_DIR/partitions"
            if [ -f "partitions/$PART" ]; then
              cp -f "partitions/$PART" "$SKETCH_DIR/partitions/"
            fi
            NAME_ONLY="${PART%.csv}"
            ARGS+=(--build-property "build.partitions=$NAME_ONLY")
          fi

          echo "arduino-cli compile args:"
          printf '  %q\n' "${ARGS[@]}"

          arduino-cli compile "${ARGS[@]}" "$SKETCH_DIR"
      # -------------------------------------------------------------------

      - name: Sanitize firmware artifact name
        id: sanitize_fw
        run: |
          NAME="firmware_${{ github.event.inputs.board_label }}_${{ github.sha }}"
          SAFE_NAME=$(echo "$NAME" | sed 's/[:<>|*?\\\/]/_/g')
          echo "safe_name=$SAFE_NAME" >> $GITHUB_OUTPUT

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.sanitize_fw.outputs.safe_name }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14
