name: Build Matrix (Arduino CLI ? ESP32 Marauder Rewired ? manifest-driven)

on:
  workflow_dispatch:

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        board_label:
          - "Flipper Zero WiFi Dev Board"
          - "Flipper Zero Multi Board S3"
          - "OG Marauder"
          - "Marauder v6"
          - "Marauder v6.1"
          - "Marauder Kit"
          - "Marauder Mini"
          - "ESP32 LDDB"
          - "Marauder Dev Board Pro"
          - "M5StickCPlus"
          - "M5StickCPlus 2"
          - "Rev Feather"
          - "Marauder v7"
          - "Marauder CYD 2432S028"
          - "Marauder CYD 2432S024 GUITION"
          - "Marauder CYD 2432S028 2 USB"
          - "Marauder v7.1"
          - "M5Cardputer"
          - "ESP32-C5-DevKitC-1"
          - "Generic ESP32 Dev Module"

    steps:
      - name: Checkout repo (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install jq + unzip
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Locate & sanitize board manifest (JSON or CSV)
        id: manifest
        shell: bash
        run: |
          set -euo pipefail
          JSON=./scaffold/configs/manifest.json
          CSV=./scaffold/configs/boards_manifest.csv
      
          if [ -f "$JSON" ]; then
            # ---- JSON ----
            MAGIC="$(head -c 3 "$JSON" | od -An -tx1 | tr -d ' \n' || true)"
            if [ "$MAGIC" = "efbbbf" ]; then
              tail -c +4 "$JSON" > "$JSON.nobom" && mv "$JSON.nobom" "$JSON"
              echo "Removed UTF-8 BOM from manifest.json"
            fi
            sed -i 's/\r$//' "$JSON"
            jq . "$JSON" >/dev/null
            echo "Found JSON manifest: $JSON"
            echo "Boards:"; jq -r '.boards[].label' "$JSON" | nl -ba
            echo "man_path=$JSON" >> $GITHUB_OUTPUT
            echo "man_type=json"  >> $GITHUB_OUTPUT
      
          elif [ -f "$CSV" ]; then
            # ---- CSV ----
            sed -i 's/\r$//' "$CSV"
            HDR="$(head -n1 "$CSV" | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')"
            case "$HDR" in
              board_label,fqbn* ) ;;
              * )
                echo "::error ::$CSV header must start with: board_label,fqbn"
                echo "Saw: $(head -n1 "$CSV")"
                exit 1
                ;;
            esac
            echo "Found CSV manifest: $CSV"
            echo "Boards:"; tail -n +2 "$CSV" | cut -d',' -f1 | nl -ba
            echo "man_path=$CSV" >> $GITHUB_OUTPUT
            echo "man_type=csv"  >> $GITHUB_OUTPUT
      
          else
            echo "::error ::No manifest found. Expected either:"
            echo "  - $JSON"
            echo "  - $CSV"
            exit 1
          fi

      - name: Locate & sanitize board manifest (JSON or CSV)
        id: manifest
        shell: bash
        run: |
          set -euo pipefail
          JSON=./scaffold/configs/manifest.json
          CSV=./scaffold/configs/boards_manifest.csv
      
          if [ -f "$JSON" ]; then
            # ---- JSON ----
            MAGIC="$(head -c 3 "$JSON" | od -An -tx1 | tr -d ' \n' || true)"
            if [ "$MAGIC" = "efbbbf" ]; then
              tail -c +4 "$JSON" > "$JSON.nobom" && mv "$JSON.nobom" "$JSON"
              echo "Removed UTF-8 BOM from manifest.json"
            fi
            sed -i 's/\r$//' "$JSON"
            jq . "$JSON" >/dev/null
            echo "Found JSON manifest: $JSON"
            echo "Boards:"; jq -r '.boards[].label' "$JSON" | nl -ba
            echo "man_path=$JSON" >> $GITHUB_OUTPUT
            echo "man_type=json"  >> $GITHUB_OUTPUT
      
          elif [ -f "$CSV" ]; then
            # ---- CSV ----
            sed -i 's/\r$//' "$CSV"
            HDR="$(head -n1 "$CSV" | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')"
            case "$HDR" in
              board_label,fqbn* ) ;;
              * )
                echo "::error ::$CSV header must start with: board_label,fqbn"
                echo "Saw: $(head -n1 "$CSV")"
                exit 1
                ;;
            esac
            echo "Found CSV manifest: $CSV"
            echo "Boards:"; tail -n +2 "$CSV" | cut -d',' -f1 | nl -ba
            echo "man_path=$CSV" >> $GITHUB_OUTPUT
            echo "man_type=csv"  >> $GITHUB_OUTPUT
      
          else
            echo "::error ::No manifest found. Expected either:"
            echo "  - $JSON"
            echo "  - $CSV"
            exit 1
          fi

      - name: Resolve board from manifest
        id: map
        shell: bash
        run: |
          set -e
          MAN="${{ steps.manifest.outputs.man_path }}"
          WANT="${{ matrix.board_label }}"

          COUNT=$(jq --arg L "$WANT" '[.boards[] | select(.label == $L)] | length' "$MAN")
          if [ "$COUNT" -eq 0 ]; then
            echo "::error ::Board label not found in manifest: $WANT"
            echo "Available labels:"; jq -r '.boards[].label' "$MAN" | nl -ba
            exit 1
          fi

          FQBN=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .fqbn' "$MAN")
          TFT_ENABLED=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .tft.enabled // false' "$MAN")
          TFT_HEADER=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .tft.header // ""' "$MAN")
          DEF_FS=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .defaults.filesystem // ""' "$MAN")
          DEF_PART=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .defaults.partition // ""' "$MAN")
          DEFINES=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | (.defines // []) | map("-D"+.) | join(" ")' "$MAN")
          FLAG=$(jq -r --arg L "$WANT" '.boards[] | select(.label==$L) | .flag // ""' "$MAN")
          if [ -n "$FLAG" ]; then DEFINES="$DEFINES -D$FLAG"; fi
          DEFINES="$(printf '%s' "$DEFINES" | tr -d '\r' | sed 's/["\x27]//g' | xargs || true)"

          echo "fqbn=$FQBN"               >> $GITHUB_OUTPUT
          echo "tft_enabled=$TFT_ENABLED" >> $GITHUB_OUTPUT
          echo "tft_header=$TFT_HEADER"   >> $GITHUB_OUTPUT
          echo "def_fs=$DEF_FS"           >> $GITHUB_OUTPUT
          echo "def_part=$DEF_PART"       >> $GITHUB_OUTPUT
          echo "defines=$DEFINES"         >> $GITHUB_OUTPUT

          echo "---- RESOLVED BOARD ----"
          echo "Board:        $WANT"
          echo "FQBN:         $FQBN"
          echo "TFT Enabled:  $TFT_ENABLED"
          echo "TFT Header:   $TFT_HEADER"
          echo "Default FS:   ${DEF_FS:-<core default>}"
          echo "Default Part: ${DEF_PART:-<core default>}"
          echo "Defines:      ${DEFINES:-<none>}"
          echo "------------------------"

      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        id: core
        run: |
          CORE_VER="2.0.11"
          echo "core_ver=$CORE_VER" >> $GITHUB_OUTPUT
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      - name: Clean conflicting libs
        run: |
          rm -rf "$HOME/Arduino/libraries/XPT2046_Touchscreen" || true
          rm -rf "$HOME/Arduino/libraries/TFT_eSPI" || true
          echo "Removed conflicting TFT/Touch libraries"

      - name: Extract pre-bundled libs (CSV-driven from scaffold/lib)
        shell: bash
        run: |
          set -euo pipefail
          CSV="scaffold/configs/lib_list.csv"
          ZIPROOT="scaffold/lib"
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"
          if [ ! -f "$CSV" ]; then
            echo "::warning ::$CSV not found; continuing without extra libs"
            exit 0
          fi
          while IFS=',' read -r ZIP DESC; do
            [[ "$ZIP" =~ ^# ]] && continue
            ZIP=$(echo "$ZIP" | xargs); [ -z "$ZIP" ] && continue
            FILE="$ZIPROOT/$ZIP"
            if [ -f "$FILE" ]; then
              echo "Unpacking $ZIP ($DESC)"
              unzip -o "$FILE" -d "$LIBDIR" >/dev/null
            else
              echo "WARNING: $ZIP not found in $ZIPROOT, skipping ($DESC)"
            fi
          done < "$CSV"
          ls -lh "$LIBDIR" || true

      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP

      - name: Prepare Sketch Folder
        id: prep
        shell: bash
        run: |
          set -e
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          rm -rf "$SKETCH_DIR"; mkdir -p "$SKETCH_DIR"
          SRC_INO="$(ls scaffold/*.ino | head -n 1)"
          [ -n "$SRC_INO" ] || (echo "::error ::No .ino found under scaffold/"; exit 1)
          cp "$SRC_INO" "$SKETCH_DIR/esp32_marauder_rewired.ino"
          rsync -a --exclude "*.ino" scaffold/ "$SKETCH_DIR/"
          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          find "$SKETCH_DIR" -maxdepth 2 -type f | sort

      - name: Apply TFT header (library-level)
        if: steps.map.outputs.tft_enabled == 'true' && steps.map.outputs.tft_header != ''
        run: |
          TE="$HOME/Arduino/libraries/TFT_eSPI"
          mkdir -p "$TE"
          echo "// Auto-generated by workflow" > "$TE/User_Setup_Select.h"
          echo "#include <${{ steps.map.outputs.tft_header }}>" >> "$TE/User_Setup_Select.h"
          echo "Applied TFT header: ${{ steps.map.outputs.tft_header }}"

      - name: Resolve FS/Partition (use manifest defaults)
        id: fs
        shell: bash
        run: |
          set -euo pipefail
          FS="${{ steps.map.outputs.def_fs }}"
          PART="${{ steps.map.outputs.def_part }}"
          echo "fs=$FS" >> $GITHUB_OUTPUT
          echo "partition=$PART" >> $GITHUB_OUTPUT
          if [ -n "$PART" ]; then
            SRC="${GITHUB_WORKSPACE}/partitions/$PART"
            DEST="$HOME/.arduino15/packages/esp32/hardware/esp32/${{ steps.core.outputs.core_ver }}/tools/partitions"
            if [ -f "$SRC" ]; then
              mkdir -p "$DEST"
              cp -f "$SRC" "$DEST/$PART"
              echo "Installed custom partition CSV to $DEST/$PART"
            fi
          fi

      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          set -euo pipefail
          FQBN="${{ steps.map.outputs.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          DEFS="${{ steps.map.outputs.defines }}"
          EXTRA_INCLUDES="-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"
          FS="${{ steps.fs.outputs.fs }}"
          PART="${{ steps.fs.outputs.partition }}"

          echo "Board:       ${{ matrix.board_label }}"
          echo "FQBN:        $FQBN"
          echo "Filesystem:  ${FS:-<default>}"
          echo "Partition:   ${PART:-<default>}"
          echo "Defines:     ${DEFS:-<none>}"

          CPP_FLAGS="$EXTRA_INCLUDES $DEFS"
          C_FLAGS="$EXTRA_INCLUDES $DEFS"

          ARGS=()
          ARGS+=(--fqbn "$FQBN")
          ARGS+=(--warnings none)
          ARGS+=(--export-binaries)
          ARGS+=(--build-property "compiler.cpp.extra_flags=$CPP_FLAGS")
          ARGS+=(--build-property "compiler.c.extra_flags=$C_FLAGS")

          [ -n "$FS" ]   && ARGS+=(--build-property "board_build.filesystem=$FS")
          if [ -n "$PART" ]; then
            mkdir -p "$SKETCH_DIR/partitions"
            [ -f "partitions/$PART" ] && cp -f "partitions/$PART" "$SKETCH_DIR/partitions/"
            ARGS+=(--build-property "build.partitions=${PART%.csv}")
          fi

          printf 'arduino-cli compile args:\n  %q\n' "${ARGS[@]}"
          arduino-cli compile "${ARGS[@]}" "$SKETCH_DIR"

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: fw_${{ matrix.board_label }}_${{ github.sha }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14
