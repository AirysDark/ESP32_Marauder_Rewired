name: debug backup (JSON)

on:
  workflow_dispatch:
    inputs:
      board_choice:
        description: "Select a board"
        required: true
        default: "Marauder v7"
        type: choice
        options:
          - Flipper Zero WiFi Dev Board
          - Flipper Zero Multi Board S3
          - OG Marauder
          - Marauder v6
          - Marauder v6.1
          - Marauder Kit
          - Marauder Mini
          - ESP32 LDDB
          - Marauder Dev Board Pro
          - M5StickCPlus
          - M5StickCPlus 2
          - Rev Feather
          - Marauder v7
          - Marauder CYD 2432S028
          - Marauder CYD 2432S024 GUITION
          - Marauder CYD 2432S028 2 USB
          - Marauder v7.1
          - M5Cardputer
          - ESP32-C5-DevKitC-1
          - Generic ESP32 Dev Module
      core_choice:
        description: "ESP32 core version"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - 2.0.10
          - 3.3.0

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure system deps
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq unzip rsync

      - name: Ensure Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade pip
          pip install pyserial

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2
        with:
          version: 0.35.3

      - name: Configure ESP32 board manager
        shell: bash
        run: |
          set -euo pipefail
          arduino-cli config init
          arduino-cli config set board_manager.additional_urls \
            https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          arduino-cli core update-index --additional-urls \
            https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json

      # --- Inputs -> ENV priming ---
      - name: Seed selector env from inputs
        shell: bash
        run: |
          set -euo pipefail
          echo "BOARD_LABEL=${{ github.event.inputs.board_choice }}" >> $GITHUB_ENV
          echo "CORE_CHOICE=${{ github.event.inputs.core_choice }}" >> $GITHUB_ENV

      # --- Manifest probe (board row preview) ---
      - name: Manifest probe (board row preview)
        shell: bash
        run: |
          set -euo pipefail
          MAN="scaffold/configs/boards/boards_manifest.json"
          if [ ! -f "$MAN" ]; then
            echo "::error::Missing $MAN"; exit 1
          fi
          echo ">> Looking up BOARD_LABEL='${BOARD_LABEL:-}' in $MAN"
          jq -r '
            def rows:
              if type=="array" then .
              elif type=="object" and .boards then .boards
              elif type=="object" then [ to_entries[] | {flag:.key} + (.value) ]
              else [] end;
            rows
            | map(select((.board_label//"")==env.BOARD_LABEL))
            | .[0] // {}
          ' "$MAN"

      # --- Export board env ---
      - name: Export board env from JSON manifest
        shell: bash
        run: |
          set -euo pipefail
          OUT="exporter.env"
          ERR="exporter.err"

          echo "BOARD_LABEL=${BOARD_LABEL}" >> $GITHUB_ENV
          python3 scaffold/tools/export_env_from_json.py > "$OUT" 2> "$ERR" || true

          echo "----- exporter stderr -----"
          cat "$ERR" || true
          echo "----- exporter env (first 20 lines) -----"
          sed -n '1,20p' "$OUT" || true

          cat "$OUT" >> $GITHUB_ENV

          if grep -q '^BOARD_FLAG=' "$OUT"; then
            echo "BOARD_FLAG_SOURCE=exporter" >> $GITHUB_ENV
          else
            echo "BOARD_FLAG_SOURCE=unset" >> $GITHUB_ENV
          fi

      # --- Ensure BOARD_FLAG fallback ---
      - name: Ensure BOARD_FLAG from label (fallback only if exporter missed it)
        shell: bash
        run: |
          set -euo pipefail
          if [ "${BOARD_FLAG_SOURCE:-unset}" = "exporter" ] && [ -n "${BOARD_FLAG:-}" ]; then
            echo "BOARD_FLAG already provided by exporter: ${BOARD_FLAG}"
            exit 0
          fi

          case "${BOARD_LABEL}" in
            "Marauder v7") echo "BOARD_FLAG=MARAUDER_V7" >> $GITHUB_ENV ;;
            "Marauder v7.1") echo "BOARD_FLAG=MARAUDER_V7_1" >> $GITHUB_ENV ;;
            "Marauder v6") echo "BOARD_FLAG=MARAUDER_V6" >> $GITHUB_ENV ;;
            "Marauder v6.1") echo "BOARD_FLAG=MARAUDER_V6_1" >> $GITHUB_ENV ;;
            "Marauder Kit") echo "BOARD_FLAG=MARAUDER_KIT" >> $GITHUB_ENV ;;
            "Marauder Mini") echo "BOARD_FLAG=MARAUDER_MINI" >> $GITHUB_ENV ;;
            "OG Marauder") echo "BOARD_FLAG=MARAUDER_OG" >> $GITHUB_ENV ;;
            "Flipper Zero WiFi Dev Board") echo "BOARD_FLAG=FLIPPER_WIFI_DEV" >> $GITHUB_ENV ;;
            "Flipper Zero Multi Board S3") echo "BOARD_FLAG=MARAUDER_MULTIBOARD_S3" >> $GITHUB_ENV ;;
            "ESP32 LDDB") echo "BOARD_FLAG=ESP32_LDDB" >> $GITHUB_ENV ;;
            "Marauder Dev Board Pro") echo "BOARD_FLAG=MARAUDER_DEVPRO" >> $GITHUB_ENV ;;
            "M5StickCPlus") echo "BOARD_FLAG=M5STICKCPLUS" >> $GITHUB_ENV ;;
            "M5StickCPlus 2") echo "BOARD_FLAG=M5STICKCPLUS2" >> $GITHUB_ENV ;;
            "Rev Feather") echo "BOARD_FLAG=MARAUDER_REV_FEATHER" >> $GITHUB_ENV ;;
            "Marauder CYD 2432S028") echo "BOARD_FLAG=MARAUDER_CYD_2432S028" >> $GITHUB_ENV ;;
            "Marauder CYD 2432S024 GUITION") echo "BOARD_FLAG=MARAUDER_CYD_2432S024" >> $GITHUB_ENV ;;
            "Marauder CYD 2432S028 2 USB") echo "BOARD_FLAG=MARAUDER_CYD_2432S028_DUALUSB" >> $GITHUB_ENV ;;
            "M5Cardputer") echo "BOARD_FLAG=MARAUDER_CARDPUTER" >> $GITHUB_ENV ;;
            "ESP32-C5-DevKitC-1") echo "BOARD_FLAG=ESP32C5_DEVKITC1" >> $GITHUB_ENV ;;
            "Generic ESP32 Dev Module") echo "BOARD_FLAG=GENERIC_ESP32" >> $GITHUB_ENV ;;
            *) echo "::warning::No fallback BOARD_FLAG mapping for '${BOARD_LABEL}'" ;;
          esac

          echo "BOARD_FLAG_SOURCE=fallback" >> $GITHUB_ENV

      # --- Core selection ---
      - name: Resolve core version (auto/manual)
        shell: bash
        run: |
          set -euo pipefail
          case "${CORE_CHOICE:-auto}" in
            auto)
              if [ -n "${CORE_VERSION:-}" ]; then
                echo "::notice::Using core from manifest: $CORE_VERSION"
              else
                echo "CORE_VERSION=2.0.11" >> $GITHUB_ENV
                echo "::warning::Manifest had no CORE_VERSION; defaulting to 2.0.11"
              fi
              ;;
            *)
              echo "CORE_VERSION=${CORE_CHOICE}" >> $GITHUB_ENV
              echo "::notice::Overriding core to ${CORE_CHOICE}"
              ;;
          esac

      - name: Install ESP32 core (with retry)
        shell: bash
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            arduino-cli core install "esp32:esp32@${CORE_VERSION}" \
              --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json && break || {
                echo "Install attempt $i failed; retrying in 5s..."
                sleep 5
              }
          done
          arduino-cli core list

      # --- FQBN fallback ---
      - name: FQBN fallback mapping (family-based)
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${FQBN:-}" ]; then
            case "${BOARD_LABEL:-}" in
              *Cardputer*|*S3*)
                echo "FQBN=esp32:esp32:esp32s3" >> $GITHUB_ENV ;;
              *Feather*|*S2*)
                echo "FQBN=esp32:esp32:esp32s2" >> $GITHUB_ENV ;;
              *)
                echo "FQBN=esp32:esp32:d32" >> $GITHUB_ENV ;;
            esac
            echo "::notice::Applied family FQBN fallback for ${BOARD_LABEL:-unknown}"
          fi

      - name: Assert FQBN present
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${FQBN:-}" ]; then
            echo "::error::FQBN empty after exporter+fallback â€” check manifest row for '${BOARD_LABEL:-}'."
            exit 1
          fi

      # --- Clean & unzip libraries from repo ---
      - name: Clean conflicting libraries (touch/TFT leftovers)
        shell: bash
        run: |
          set -euo pipefail
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"
          cd "$LIBDIR"
          rm -rf XPT2049Touch XPT2046_Touchscreen TFT_eSPI || true

      - name: Extract pre-bundled libs (JSON-driven)
        shell: bash
        run: |
          set -euo pipefail
          JSON="scaffold/configs/libs/lib_list.json"
          ZIPROOT="scaffold/lib"
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"

          if [ ! -f "$JSON" ]; then
            echo "::error ::$JSON not found"; exit 1
          fi

          echo "lib_list.json (first 200 bytes):"
          head -c 200 "$JSON" || true; echo

          mapfile -t ZIPS < <(jq -r '
            def aszip:
              if type=="string" then .
              elif type=="object" then ( .zip // .["# zip_file"] // empty )
              else empty end;
            if type=="array" then map(aszip)[]
            elif type=="object" and .libs then (.libs | map(aszip)[])
            else empty end
            | select(. != null and . != "")
          ' "$JSON")

          if [ "${#ZIPS[@]}" -eq 0 ]; then
            echo "::error ::No ZIP entries found in $JSON. Expected array of zips or {\"libs\":[...]}, items as strings or {zip}/{\"# zip_file\"}."
            exit 1
          fi

          echo "Found ${#ZIPS[@]} zip(s):"
          for z in "${ZIPS[@]}"; do echo "  - $z"; done

          for ZIP in "${ZIPS[@]}"; do
            FILE="$ZIPROOT/$ZIP"
            if [ -f "$FILE" ]; then
              echo "Unpacking $ZIP -> $LIBDIR"
              unzip -o "$FILE" -d "$LIBDIR" >/dev/null
            else
              echo "::warning ::$ZIP not found at $ZIPROOT"
            fi
          done

          echo "Installed libs under $LIBDIR:"
          find "$LIBDIR" -maxdepth 2 -type f | sed 's/^/  /' || true

      # --- Stage sketch ---
      - name: Prepare Sketch Folder
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          rm -rf "$SKETCH_DIR"; mkdir -p "$SKETCH_DIR"
          SRC_INO="$(ls scaffold/*.ino | head -n 1)"
          cp "$SRC_INO" "$SKETCH_DIR/esp32_marauder_rewired.ino"
          rsync -a scaffold/ "$SKETCH_DIR/"
          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          echo "Top-level sketch dir:"
          ls -la "$SKETCH_DIR"

      # --- Autogen headers into staged dir ---
      - name: Generate config.h (JSON-driven)
        shell: bash
        run: |
          set -euo pipefail
          python3 scaffold/tools/gen_user_config.py \
            --boards-json scaffold/configs/boards/boards_manifest.json \
            --defines-json scaffold/configs/defines/build_defines.json \
            --modules-json scaffold/configs/modules/modules_presets.json \
            --board-flag "${BOARD_FLAG:-}" \
            --board-label "${BOARD_LABEL:-}" \
            --out "${{ steps.prep.outputs.sketch_dir }}/.autogen/config.h"

      - name: Generate TFT_eSPI header (serial-only safe)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ steps.prep.outputs.sketch_dir }}/.tft_setup"
          python3 scaffold/tools/gen_tft_setup_json.py \
            --boards-json scaffold/configs/boards/boards_manifest.json \
            --displays-json scaffold/configs/displays/display_presets.json \
            --pins-json scaffold/configs/pins/pin_presets.json \
            --board-label "${BOARD_LABEL:-}" \
            --board-flag "${BOARD_FLAG:-}" \
            --model "${DISPLAY_MODEL:-}" \
            --tft-enabled "${DISPLAY_ENABLED:-}" \
            --out-dir "${{ steps.prep.outputs.sketch_dir }}/.tft_setup"

      # --- Partitions / filesystem ---
      - name: Resolve FS/Partition and install custom CSV if present
        id: fs
        shell: bash
        run: |
          set -euo pipefail
          FS_IN="${FILESYSTEM:-}"
          PART_IN="${PARTITION:-}"
          CORE_VER="${CORE_VERSION:-2.0.11}"

          CORE_PART_DIR="$HOME/.arduino15/packages/esp32/hardware/esp32/${CORE_VER}/tools/partitions"

          FS="$FS_IN"
          PART="${PART_IN}"
          if [ -n "$PART" ]; then PART="${PART%.csv}.csv"; fi

          if [ -n "$PART" ]; then
            SRC="${GITHUB_WORKSPACE}/partitions/$PART"
            if [ -f "$SRC" ]; then
              mkdir -p "$CORE_PART_DIR"
              cp -f "$SRC" "$CORE_PART_DIR/$PART"
              echo "Installed custom partition CSV to $CORE_PART_DIR/$PART"
            fi
          fi

          echo "fs=$FS"   >> $GITHUB_OUTPUT
          echo "partition=$PART" >> $GITHUB_OUTPUT
          echo "Filesystem: ${FS:-<core default>}"
          echo "Partition:  ${PART:-<core default>}"

      # --- Compile ---
      - name: Compile (Arduino CLI)
        working-directory: ${{ steps.prep.outputs.sketch_dir }}
        shell: bash
        env:
          EXTRA_FLAGS: "-I${{ steps.prep.outputs.sketch_dir }}/.tft_setup -I${{ steps.prep.outputs.sketch_dir }}/.autogen"
        run: |
          set -euo pipefail
          if [ -z "${FQBN:-}" ]; then
            echo "::error::FQBN is empty at compile time; check earlier steps."
            exit 1
          fi

          FS="${{ steps.fs.outputs.fs }}"
          PART="${{ steps.fs.outputs.partition }}"
          PART_PROP=""
          if [ -n "$PART" ]; then
            PART_PROP="--build-property build.partitions=${PART%.csv}"
          fi

          echo "FQBN:       $FQBN"
          echo "Sketch dir: $(pwd)"
          echo "Filesystem: ${FS:-<default>}"
          echo "Partition:  ${PART:-<default>}"
          ls -la; ls -la .tft_setup || true; ls -la .autogen || true

          arduino-cli compile \
            --fqbn "$FQBN" \
            --warnings none \
            --export-binaries \
            --build-property "compiler.cpp.extra_flags=${EXTRA_FLAGS}" \
            ${PART_PROP} \
            --output-dir "$GITHUB_WORKSPACE/build_out" \
            .

      # --- Log + artifacts ---
      - name: Inspect ELF and save build log
        shell: bash
        run: |
          set -euo pipefail
          LOG="build_log.txt"
          {
            echo "===== ESP32 Marauder Rewired Build Log ====="
            echo "Run: $GITHUB_RUN_ID"
            echo "Inputs:"
            echo "  board_choice = ${{ github.event.inputs.board_choice }}"
            echo "  core_choice  = ${{ github.event.inputs.core_choice }}"
            echo
            echo "Resolved environment:"
            echo "  BOARD_LABEL        = ${BOARD_LABEL:-<unset>}"
            echo "  BOARD_FLAG         = ${BOARD_FLAG:-<unset>}"
            echo "  BOARD_FLAG_SOURCE  = ${BOARD_FLAG_SOURCE:-<unset>}"
            echo "  FQBN               = ${FQBN:-<unset>}"
            echo "  CORE_VERSION       = ${CORE_VERSION:-<unset>}"
            echo "  FILESYSTEM         = ${FILESYSTEM:-<unset>}"
            echo "  PARTITION          = ${PARTITION:-<unset>}"
            echo
            ELF=$(find "$GITHUB_WORKSPACE/build_out" -name "*.elf" | head -n 1 || true)
            if [ -n "$ELF" ] && [ -f "$ELF" ]; then
              echo "ELF: $ELF"
              echo "--- Symbols (showMainMenu/init_tool_registry) ---"
              nm "$ELF" | grep -E "showMainMenu|init_tool_registry" || echo "<none>"
            else
              echo "No ELF found."
            fi
            echo "==============================================="
          } | tee "$LOG"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fw-${{ env.BOARD_LABEL }}-${{ env.CORE_VERSION }}
          path: build_out

      - name: Upload build log
        uses: actions/upload-artifact@v4
        with:
          name: build-debug-log
          path: build_log.txt
