name: esp32s3 (JSON + Autogen + CrowPanel option)

on:
  workflow_dispatch:
    inputs:
      board_flag:
        description: 'Board flag from manifest (e.g., MARAUDER_V7)'
        required: false
        default: 'MARAUDER_V7'
      board_label:
        description: 'Optional board_label override'
        required: false
        default: ''
      fqbn:
        description: 'Optional explicit FQBN (e.g., esp32:esp32:esp32s3:PartitionScheme=min_spiffs,FlashSize=16M)'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: System deps
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq unzip rsync

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Pip deps
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade pip
          pip install pyserial

      # ---------- Inspect repo ----------
      - name: Debug repo layout
        shell: bash
        run: |
          set -euo pipefail
          pwd
          ls -la
          ls -la scaffold || true
          ls -la scaffold/configs || true
          ls -la scaffold/configs/boards || true
          sed -n '1,160p' scaffold/configs/boards/boards_manifest.json || true

      # ---------- Export env from JSON manifest ----------
      - name: Export env from manifest
        shell: bash
        run: |
          set -euo pipefail
          # seed selectors for exporter
          echo "BOARD_FLAG=${{ github.event.inputs.board_flag }}"  >> $GITHUB_ENV
          echo "BOARD_LABEL=${{ github.event.inputs.board_label }}" >> $GITHUB_ENV
          # run exporter (tolerate absence)
          python3 scaffold/tools/export_env_from_json.py >> $GITHUB_ENV 2> exporter.err || true
          echo "----- exporter stderr -----"; cat exporter.err || true

      # Ensure sane defaults so 'set -u' doesn't explode later
      - name: Normalize env defaults
        shell: bash
        run: |
          set -euo pipefail
          : "${FLAG:=${BOARD_FLAG:-MARAUDER_V7}}"
          echo "FLAG=$FLAG" >> $GITHUB_ENV
          : "${FILESYSTEM:=}"
          : "${PARTITION:=}"
          : "${DISPLAY_ENABLED:=}"
          : "${DISPLAY_MODEL:=}"
          : "${CORE_VERSION:=2.0.11}"
          echo "CORE_VERSION=$CORE_VERSION" >> $GITHUB_ENV

      # ---------- FQBN resolution: input > manifest > fbqn > fallback ----------
      - name: Resolve FQBN
        shell: bash
        run: |
          set -euo pipefail
          # 1) explicit input wins
          if [ -n "${{ github.event.inputs.fqbn }}" ]; then
            echo "FQBN=${{ github.event.inputs.fqbn }}" >> $GITHUB_ENV
          fi
          # 2) fallback to FBQN if exporter gave it
          if [ -z "${FQBN:-}" ] && [ -n "${FBQN:-}" ]; then
            echo "FQBN=$FBQN" >> $GITHUB_ENV
          fi
          # 3) last-resort map for known flags
          if [ -z "${FQBN:-}" ]; then
            case "${FLAG:-}" in
              # classic marauder boards
              MARAUDER_V7|MARAUDER_V6|MARAUDER_V6_1|MARAUDER_KIT|MARAUDER_MINI)
                echo "FQBN=esp32:esp32:d32:PartitionScheme=min_spiffs" >> $GITHUB_ENV ;;
              MARAUDER_CARDPUTER|MARAUDER_MULTIBOARD_S3)
                echo "FQBN=esp32:esp32:esp32s3:PartitionScheme=min_spiffs,FlashSize=8M" >> $GITHUB_ENV ;;
              MARAUDER_REV_FEATHER|MARAUDER_FLIPPER)
                echo "FQBN=esp32:esp32:esp32s2:PartitionScheme=min_spiffs,FlashSize=4M,PSRAM=enabled" >> $GITHUB_ENV ;;
              *)
                # CrowPanel S3 dev-friendly default if nothing else set
                echo "FQBN=esp32:esp32:esp32s3:PartitionScheme=min_spiffs,FlashSize=16M,PSRAM=disabled" >> $GITHUB_ENV ;;
            esac
            echo "::notice::Applied fallback FQBN for '${FLAG:-unknown}'"
          fi

      - name: Assert FQBN
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${FQBN:-}" ]; then
            echo "::error::FQBN empty after all fallbacks."; exit 1;
          fi
          echo "Using FQBN: $FQBN"

      # ---------- Arduino CLI / core ----------
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2
        with:
          version: 0.35.3

      - name: Configure core index & install core
        shell: bash
        run: |
          set -euo pipefail
          arduino-cli config init
          arduino-cli config set board_manager.additional_urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          arduino-cli core update-index --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          for i in 1 2 3; do
            arduino-cli core install esp32:esp32@${CORE_VERSION} \
              --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json && break || {
                echo "Install attempt $i failed; retrying in 5s..."; sleep 5; }
          done
          arduino-cli core list

      # ---------- Optional pre-bundled ZIP libs ----------
      - name: Extract pre-bundled libs (JSON-driven)
        shell: bash
        run: |
          set -euo pipefail
          JSON="scaffold/configs/libs/lib_list.json"
          ZIPROOT="scaffold/lib"
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"
          if [ -f "$JSON" ]; then
            mapfile -t ZIPS < <(jq -r '
              if type=="array" then .[]
              elif type=="object" and .libs then .libs[]
              else empty end
              | (if type=="string" then . else .zip // empty end)
              | select(. != null and . != "" and (startswith("#")|not))
            ' "$JSON")
            for ZIP in "${ZIPS[@]}"; do
              FILE="$ZIPROOT/$ZIP"
              if [ -f "$FILE" ]; then
                echo "Unpacking $ZIP"
                unzip -o "$FILE" -d "$LIBDIR" >/dev/null
              else
                echo "::warning ::$ZIP not found in $ZIPROOT"
              fi
            done
          else
            echo "::notice ::$JSON not found; skipping pre-bundled libs."
          fi
          echo "Installed libs in $LIBDIR:"; ls -1 "$LIBDIR" || true

      # ---------- Stage sketch tree ----------
      - name: Stage sketch
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          rm -rf "$SKETCH_DIR"; mkdir -p "$SKETCH_DIR"
          # bring scaffold content if present
          if [ -d scaffold ]; then rsync -a scaffold/ "$SKETCH_DIR/"; fi
          # ensure INO present (prefer root, fallback to scaffold)
          if [ -f esp32_marauder_rewired.ino ]; then
            cp -f esp32_marauder_rewired.ino "$SKETCH_DIR/esp32_marauder_rewired.ino"
          elif [ ! -f "$SKETCH_DIR/esp32_marauder_rewired.ino" ]; then
            echo "::error ::esp32_marauder_rewired.ino not found (root or scaffold/)."; exit 1;
          fi
          # keep menus/ folder (headers/sources) if exists
          mkdir -p "$SKETCH_DIR/menus"
          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          echo "Tree:"; find "$SKETCH_DIR" -maxdepth 2 -type f | sed 's/^/  /'

      # ---------- Autogen headers into staged dir ----------
      - name: Generate config.h (JSON-driven)
        shell: bash
        run: |
          set -euo pipefail
          python3 scaffold/tools/gen_user_config.py \
            --boards-json scaffold/configs/boards/boards_manifest.json \
            --defines-json scaffold/configs/defines/build_defines.json \
            --modules-json scaffold/configs/modules/modules_presets.json \
            --board-flag "${BOARD_FLAG:-}" \
            --board-label "${BOARD_LABEL:-}" \
            --out "${{ steps.prep.outputs.sketch_dir }}/.autogen/config.h"
          ls -la "${{ steps.prep.outputs.sketch_dir }}/.autogen" || true

      - name: Generate TFT_eSPI header (from presets)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ steps.prep.outputs.sketch_dir }}/.tft_setup"
          python3 scaffold/tools/gen_tft_setup_json.py \
            --boards-json scaffold/configs/boards/boards_manifest.json \
            --displays-json scaffold/configs/displays/display_presets.json \
            --pins-json scaffold/configs/pins/pin_presets.json \
            --board-label "${BOARD_LABEL:-}" \
            --board-flag "${BOARD_FLAG:-}" \
            --model "${DISPLAY_MODEL:-}" \
            --tft-enabled "${DISPLAY_ENABLED:-}" \
            --out-dir "${{ steps.prep.outputs.sketch_dir }}/.tft_setup"
          ls -la "${{ steps.prep.outputs.sketch_dir }}/.tft_setup" || true

      # ---------- Partitions / filesystem ----------
      - name: Resolve FS/Partition and install custom CSV if present
        id: fs
        shell: bash
        run: |
          set -euo pipefail
          CORE_PART_DIR="$HOME/.arduino15/packages/esp32/hardware/esp32/${CORE_VERSION}/tools/partitions"
          FS="${FILESYSTEM:-}"
          PART="${PARTITION:-}"
          [ -n "$PART" ] && PART="${PART%.csv}.csv"
          if [ -n "$PART" ]; then
            SRC="${GITHUB_WORKSPACE}/partitions/$PART"
            if [ -f "$SRC" ]; then
              mkdir -p "$CORE_PART_DIR"
              cp -f "$SRC" "$CORE_PART_DIR/$PART"
              echo "Installed custom partition CSV to $CORE_PART_DIR/$PART"
            fi
          fi
          echo "fs=$FS"   >> $GITHUB_OUTPUT
          echo "partition=$PART" >> $GITHUB_OUTPUT
          echo "Filesystem: ${FS:-<core default>}"
          echo "Partition:  ${PART:-<core default>}"

      # ---------- Compile ----------
      - name: Compile (Arduino CLI)
        working-directory: ${{ steps.prep.outputs.sketch_dir }}
        shell: bash
        env:
          EXTRA_FLAGS: ""
        run: |
          set -euo pipefail
          # include autogen/tft headers if present
          [ -d ".autogen"   ] && EXTRA_FLAGS="$EXTRA_FLAGS -I$(pwd)/.autogen"
          [ -d ".tft_setup" ] && EXTRA_FLAGS="$EXTRA_FLAGS -I$(pwd)/.tft_setup"

          FS="${{ steps.fs.outputs.fs }}"
          PART="${{ steps.fs.outputs.partition }}"
          PART_PROP=""
          [ -n "$PART" ] && PART_PROP="--build-property build.partitions=${PART%.csv}"

          echo "FQBN:       $FQBN"
          echo "EXTRA:      $EXTRA_FLAGS"
          echo "Filesystem: ${FS:-<default>}"
          echo "Partition:  ${PART:-<default>}"
          ls -la; ls -la .autogen || true; ls -la .tft_setup || true

          arduino-cli compile \
            --fqbn "$FQBN" \
            --warnings none \
            --export-binaries \
            --build-property "compiler.cpp.extra_flags=${EXTRA_FLAGS}" \
            ${PART_PROP} \
            --output-dir "$GITHUB_WORKSPACE/build_out" \
            .

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: fw-${{ env.FLAG }}-${{ env.CORE_VERSION }}
          path: build_out
