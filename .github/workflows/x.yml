name: Build & Bundle (Arduino CLI â€” ESP32 Marauder Rewired)

on:
  workflow_dispatch:
    inputs:
      fqbn:
        description: 'FQBN (e.g., esp32:esp32:esp32s3)'
        required: true
        default: 'esp32:esp32:esp32s3'
      core_version:
        description: 'Arduino-ESP32 core (e.g., 2.0.11)'
        required: true
        default: '2.0.11'
      config_name:
        description: 'Config filename in scaffold/configs (e.g., marauder_mini.json)'
        required: true
        default: 'marauder_mini.json'
      custom_config_json:
        description: 'Optional: paste JSON to override config_name (creates configs/custom.json)'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set build paths (ARD15, ARDLIBS) using RUNNER_TEMP
        run: |
          echo "ARD15=$RUNNER_TEMP/arduino15" >> "$GITHUB_ENV"
          echo "ARDLIBS=$RUNNER_TEMP/Arduino/libraries" >> "$GITHUB_ENV"
          mkdir -p "$ARD15" "$ARDLIBS"

      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        env:
          CORE_VER: ${{ inputs.core_version }}
        run: |
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          # Force use of our temp dirs so they are easy to bundle
          arduino-cli config set directories.data "$ARD15"
          arduino-cli config set directories.user "$ARDLIBS/.."
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      # ---------- Libraries ----------
      - name: Ensure Arduino libraries folder
        run: mkdir -p "$ARDLIBS"

      - name: Install ESP32Ping
        uses: actions/checkout@v4
        with:
          repository: marian-craciunescu/ESP32Ping
          ref: 1.6
          path: CustomESP32Ping

      - name: Install AsyncTCP
        uses: actions/checkout@v4
        with:
          repository: me-no-dev/AsyncTCP
          ref: master
          path: CustomAsyncTCP

      - name: Install MicroNMEA
        uses: actions/checkout@v4
        with:
          repository: stevemarple/MicroNMEA
          ref: v2.0.6
          path: CustomMicroNMEA

      - name: Install ESPAsyncWebServer (Custom from repo)
        run: |
          rm -rf "$ARDLIBS/ESPAsyncWebServer"
          cp -r Custom/ESPAsyncWebServer "$ARDLIBS/ESPAsyncWebServer"

      - name: Install TFT_eSPI
        uses: actions/checkout@v4
        with:
          repository: Bodmer/TFT_eSPI
          ref: V2.5.34
          path: CustomTFT_eSPI

      - name: Install XPT2046_Touchscreen
        uses: actions/checkout@v4
        with:
          repository: PaulStoffregen/XPT2046_Touchscreen
          ref: v1.4
          path: CustomXPT2046_Touchscreen

      - name: Install NimBLE-Arduino
        uses: actions/checkout@v4
        with:
          repository: h2zero/NimBLE-Arduino
          ref: 1.3.8
          path: CustomNimBLE-Arduino

      - name: Install other libs
        run: |
          arduino-cli lib install "ArduinoJson@6.18.2" "Adafruit NeoPixel@1.10.7" "LinkedList@1.3.3" "EspSoftwareSerial@8.1.0" "Adafruit BusIO@1.15.0" "Adafruit MAX1704X@1.0.2"
          for d in Custom*; do
            bn=$(basename "$d")
            rm -rf "$ARDLIBS/$bn"
            mv "$d" "$ARDLIBS/$bn"
          done

      # ---------- Local library for registry ----------
      - name: Create ESP32MarauderRegistry local library
        run: |
          set -e
          LIBDIR="$ARDLIBS/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.3
          architectures=*
          includes=registry/ToolRegistry.h
          PROP
          echo "Library tree:"; find "$LIBDIR/src" -maxdepth 3 -type f | sort

      # ---------- Select/prepare config ----------
      - name: Select config (file or custom JSON)
        id: cfg
        shell: bash
        run: |
          set -e
          mkdir -p scaffold/data scaffold/configs
          if [ -n "${{ inputs.custom_config_json }}" ]; then
            echo "${{ inputs.custom_config_json }}" > scaffold/configs/custom.json
            CONFIG_FILE="custom.json"
          else
            CONFIG_FILE="${{ inputs.config_name }}"
          fi
          test -f "scaffold/configs/$CONFIG_FILE" || { echo "::error ::Config not found: scaffold/configs/$CONFIG_FILE"; exit 1; }
          cp "scaffold/configs/$CONFIG_FILE" scaffold/data/config.json
          echo "config_file=$CONFIG_FILE" >> $GITHUB_OUTPUT

      # ---------- Prepare Sketch ----------
      - name: Prepare Sketch Folder (from scaffold/)
        id: prep
        shell: bash
        run: |
          set -e
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          mkdir -p "$SKETCH_DIR"

          INO_SRC=$(ls scaffold/*.ino | head -n 1)
          [ -n "$INO_SRC" ] || (echo "No .ino found at scaffold/ root"; exit 1)
          cp "$INO_SRC" "$SKETCH_DIR/esp32_marauder_rewired.ino"

          pushd scaffold >/dev/null
          find . -type f \( -name "*.h" -o -name "*.hpp" -o -name "*.c" -o -name "*.cpp" -o -name "*.json" \) -print0 \
            | xargs -0 -I {} cp --parents "{}" "$SKETCH_DIR/"
          popd >/dev/null

          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT

      # ---------- Compile ----------
      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          set -e
          FQBN="${{ inputs.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          EXTRA="-I$ARDLIBS/ESP32MarauderRegistry/src"
          echo "Compiling for $FQBN with config ${{ steps.cfg.outputs.config_file }}"
          arduino-cli compile \
            --fqbn "$FQBN" \
            "$SKETCH_DIR" \
            --warnings none \
            --export-binaries \
            --build-property compiler.cpp.extra_flags="$EXTRA" \
            --build-property compiler.c.extra_flags="$EXTRA"

      # ---------- Sanitize and Upload firmware artifact ----------
      - name: Sanitize firmware artifact name
        id: sanitize_fw
        run: |
          NAME="firmware_${{ inputs.fqbn }}_${{ github.sha }}"
          SAFE_NAME=$(echo "$NAME" | sed 's/[:<>|*?\\\/]/_/g')
          echo "safe_name=$SAFE_NAME" >> $GITHUB_OUTPUT

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.sanitize_fw.outputs.safe_name }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 14
          compression-level: 6
          overwrite: false
          include-hidden-files: false

      # ---------- Bundle EVERYTHING used to compile ----------
      - name: Create toolchain bundle (cores, libs, cli, sketch, configs, manifest)
        id: bundle
        shell: bash
        run: |
          set -euo pipefail

          BDIR="${GITHUB_WORKSPACE}/toolchain_bundle"
          OUTDIR="${GITHUB_WORKSPACE}/dist"
          mkdir -p "$BDIR" "$OUTDIR"

          echo "== Collecting pieces =="

          # 1) Arduino CLI binary
          if [ -d "${GITHUB_WORKSPACE}/bin" ]; then
            mkdir -p "$BDIR/bin"
            cp -a "${GITHUB_WORKSPACE}/bin/." "$BDIR/bin/"
          else
            echo "WARN: ${GITHUB_WORKSPACE}/bin not found (CLI still in PATH)."
          fi

          # 2) Arduino15 data (cores/toolchains + config)
          if [ -d "${ARD15}" ]; then
            mkdir -p "$BDIR/arduino15"
            cp -a "${ARD15}/." "$BDIR/arduino15/"
          else
            echo "WARN: ARD15 (${ARD15}) not found."
          fi

          # 3) Libraries (all)
          if [ -d "${ARDLIBS}" ]; then
            mkdir -p "$BDIR/Arduino/libraries"
            cp -a "${ARDLIBS}/." "$BDIR/Arduino/libraries/"
          else
            echo "WARN: ARDLIBS (${ARDLIBS}) not found."
          fi

          # 4) Prepared sketch (what was compiled)
          if [ -d "_build/esp32_marauder_rewired" ]; then
            mkdir -p "$BDIR/sketch"
            cp -a "_build/esp32_marauder_rewired/." "$BDIR/sketch/"
          else
            echo "::error ::Prepared sketch folder missing"; exit 1
          fi

          # 5) Repo configs folder (including custom.json if used)
          if [ -d "scaffold/configs" ]; then
            mkdir -p "$BDIR/configs"
            cp -a "scaffold/configs/." "$BDIR/configs/"
          fi

          # 6) Manifest with versions and metadata
          {
            echo "Repo: $GITHUB_REPOSITORY"
            echo "Commit: $GITHUB_SHA"
            echo "FQBN: ${{ inputs.fqbn }}"
            echo "Core Version: ${{ inputs.core_version }}"
            echo "Config: ${{ steps.cfg.outputs.config_file }}"
            echo
            echo "arduino-cli version:"
            arduino-cli version || true
            echo
            echo "Installed cores:"
            arduino-cli core list || true
            echo
            echo "Installed libraries (user):"
            ls -la "${ARDLIBS}" || true
          } > "$BDIR/MANIFEST.txt"

          echo "== Bundle tree =="
          du -sh "$BDIR" || true
          find "$BDIR" -maxdepth 2 -type d | sort

          TAR="${OUTDIR}/toolchain_${GITHUB_SHA}.tar.gz"
          echo "== Creating archive =="
          tar -C "${GITHUB_WORKSPACE}" -czhf "$TAR" "$(basename "$BDIR")"

          echo "bundle=$TAR" >> $GITHUB_OUTPUT
          echo "Archive created:"; ls -lh "$TAR"

      - name: Sanitize bundle artifact name
        id: sanitize_bundle
        run: |
          NAME="toolchain_${{ inputs.fqbn }}_${{ github.sha }}"
          SAFE_NAME=$(echo "$NAME" | sed 's/[:<>|*?\\\/]/_/g')
          echo "safe_bundle_name=$SAFE_NAME" >> $GITHUB_OUTPUT

      - name: Upload toolchain bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.sanitize_bundle.outputs.safe_bundle_name }}
          path: ${{ steps.bundle.outputs.bundle }}
          if-no-files-found: error
          retention-days: 14
          compression-level: 6
          overwrite: false
          include-hidden-files: false
