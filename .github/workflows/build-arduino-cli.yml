name: Build (Arduino CLI â€” ESP32 Marauder Rewired)

on:
  push:
    branches: [ main, master ]
    tags: [ "*" ]
  pull_request:
  workflow_dispatch:
    inputs:
      fqbn:
        description: "Overwrite FQBN (e.g., esp32:esp32:esp32s3)"
        required: false
      core_version:
        description: "Arduino-ESP32 core (e.g., 2.0.11)"
        required: false
        default: "2.0.11"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        fqbn:
          - esp32:esp32:esp32
          - esp32:esp32:esp32s2
          - esp32:esp32:esp32s3

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Arduino CLI (via curl)
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          echo "PATH after install:"; echo $PATH
          "${GITHUB_WORKSPACE}/bin/arduino-cli" version

      - name: Configure & Install ESP32 Core
        env:
          CORE_VER: ${{ inputs.core_version || '2.0.11' }}
        run: |
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      # ---------- Libraries (match your style) ----------
      # Use git checkouts to pinned paths, then move to Arduino lib dir.
      - name: Prepare Arduino library folder
        run: |
          mkdir -p "$HOME/Arduino/libraries"

      - name: Install ESP32Ping
        run: arduino-cli lib install ESP32Ping@1.6

      - name: Install AsyncTCP
        uses: actions/checkout@v4
        with:
          repository: me-no-dev/AsyncTCP
          ref: master
          path: _libs/AsyncTCP

      - name: Install ESPAsyncWebServer
        uses: actions/checkout@v4
        with:
          repository: me-no-dev/ESPAsyncWebServer
          ref: master
          path: _libs/ESPAsyncWebServer

      - name: Install MicroNMEA
        uses: actions/checkout@v4
        with:
          repository: stevemarple/MicroNMEA
          ref: v2.0.6
          path: _libs/MicroNMEA

      - name: Install TFT_eSPI
        uses: actions/checkout@v4
        with:
          repository: Bodmer/TFT_eSPI
          ref: V2.5.34
          path: _libs/TFT_eSPI

      - name: Install XPT2046_Touchscreen
        uses: actions/checkout@v4
        with:
          repository: PaulStoffregen/XPT2046_Touchscreen
          ref: v1.4
          path: _libs/XPT2046_Touchscreen

      - name: Install NimBLE-Arduino
        uses: actions/checkout@v4
        with:
          repository: h2zero/NimBLE-Arduino
          ref: 1.3.8
          path: _libs/NimBLE-Arduino

      - name: Install other libs (ArduinoJson, NeoPixel, etc.)
        run: |
          arduino-cli lib install "ArduinoJson@6.18.2" "Adafruit NeoPixel@1.10.7" "LinkedList@1.3.3" "EspSoftwareSerial@8.1.0" "Adafruit BusIO@1.15.0" "Adafruit MAX1704X@1.0.2"

      - name: Move git-based libs to Arduino libraries folder
        run: |
          for d in _libs/*; do
            bn=$(basename "$d")
            echo "Installing $bn -> $HOME/Arduino/libraries/$bn"
            rm -rf "$HOME/Arduino/libraries/$bn"
            mv "$d" "$HOME/Arduino/libraries/$bn"
          done
          echo "Installed libs:"; ls -la "$HOME/Arduino/libraries"

      # Optional: provide your own TFT_eSPI User_Setup_*.h files in repo root and copy them
      - name: Configure TFT_eSPI (optional)
        run: |
          if ls User_*.h >/dev/null 2>&1; then
            cp User_*.h "$HOME/Arduino/libraries/TFT_eSPI/"
            # If you need to modify User_Setup_Select.h, do it here.
            echo "Custom TFT_eSPI user files copied."
          else
            echo "No custom TFT_eSPI User_*.h found; skipping."
          fi

      # ---------- Create Arduino sketch from /scaffold ----------
      - name: Prepare Sketch Folder (from scaffold/)
        id: prep
        shell: bash
        run: |
          set -e
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          mkdir -p "$SKETCH_DIR"
          # Entry point
          cp scaffold/example_integration/main_demo_snippet.ino \
             "$SKETCH_DIR/esp32_marauder_rewired.ino"
          # Bring in all .h/.hpp/.c/.cpp (keep relative dirs)
          find scaffold -type f \( -name "*.h" -o -name "*.hpp" -o -name "*.c" -o -name "*.cpp" \) -print0 \
            | xargs -0 -I {} cp --parents "{}" "$SKETCH_DIR/"
          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          echo "Sketch contents:"
          find "$SKETCH_DIR" -maxdepth 3 -type f | sort

      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          FQBN="${{ inputs.fqbn || matrix.fqbn }}"
          echo "Compiling for $FQBN"
          arduino-cli compile --fqbn "$FQBN" "${{ steps.prep.outputs.sketch_dir }}" --warnings none --export-binaries

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: rewired_${{ inputs.fqbn || matrix.fqbn }}_${{ github.sha }}
          path: |
            _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 7
