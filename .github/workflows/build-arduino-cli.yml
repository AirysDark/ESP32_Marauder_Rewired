name: Build (Arduino CLI â€” ESP32 Marauder Rewired)

on:
  push:
    branches: [ main, master ]
    tags: [ "*" ]
  pull_request:
  workflow_dispatch:
    inputs:
      fqbn:
        description: "Override FQBN (e.g., esp32:esp32:esp32s3)"
        required: false
      core_version:
        description: "Arduino-ESP32 core (e.g., 2.0.11)"
        required: false
        default: "2.0.11"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        fqbn:
          - esp32:esp32:esp32
          - esp32:esp32:esp32s2
          - esp32:esp32:esp32s3

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          arduino-cli version

      - name: Configure & Install ESP32 Core
        env:
          CORE_VER: ${{ inputs.core_version || '2.0.11' }}
        run: |
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      # ---------- Libraries ----------
      - name: Ensure Arduino libraries folder
        run: mkdir -p "$HOME/Arduino/libraries"

      - name: Install ESP32Ping
        uses: actions/checkout@v4
        with:
          repository: marian-craciunescu/ESP32Ping
          ref: 1.6
          path: CustomESP32Ping

      - name: Install AsyncTCP
        uses: actions/checkout@v4
        with:
          repository: me-no-dev/AsyncTCP
          ref: master
          path: CustomAsyncTCP

      - name: Install MicroNMEA
        uses: actions/checkout@v4
        with:
          repository: stevemarple/MicroNMEA
          ref: v2.0.6
          path: CustomMicroNMEA

      - name: Install TFT_eSPI
        uses: actions/checkout@v4
        with:
          repository: Bodmer/TFT_eSPI
          ref: V2.5.34
          path: CustomTFT_eSPI

      - name: Install XPT2046_Touchscreen
        uses: actions/checkout@v4
        with:
          repository: PaulStoffregen/XPT2046_Touchscreen
          ref: v1.4
          path: CustomXPT2046_Touchscreen

      - name: Install NimBLE-Arduino
        uses: actions/checkout@v4
        with:
          repository: h2zero/NimBLE-Arduino
          ref: 1.3.8
          path: CustomNimBLE-Arduino

      - name: Install other libs via Arduino-CLI
        run: |
          arduino-cli lib install \
            "ArduinoJson@6.18.2" \
            "Adafruit NeoPixel@1.10.7" \
            "LinkedList@1.3.3" \
            "EspSoftwareSerial@8.1.0" \
            "Adafruit BusIO@1.17.2" \
            "Adafruit MAX1704X@1.0.2"

      - name: Move custom libs into Arduino libraries
        run: |
          for d in Custom*; do
            [ -d "$d" ] || continue
            bn=$(basename "$d")
            rm -rf "$HOME/Arduino/libraries/$bn"
            mv "$d" "$HOME/Arduino/libraries/$bn"
          done
          echo "Installed libs:"; ls -la "$HOME/Arduino/libraries"

      # ---------- Clean caches ----------
      - name: Clean Arduino caches
        run: |
          rm -rf ~/.cache/arduino || true
          arduino-cli cache clean || true
          rm -rf _build || true

      # ---------- Prepare sketch from scaffold/ but SKIP registry/ ----------
      - name: Prepare Sketch Folder (from scaffold/)
        id: prep
        shell: bash
        run: |
          set -e
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          mkdir -p "$SKETCH_DIR"

          INO_SRC=$(ls scaffold/*.ino | head -n 1)
          [ -n "$INO_SRC" ] || (echo "No .ino found at scaffold/ root"; exit 1)
          echo "Using INO: $INO_SRC"
          cp "$INO_SRC" "$SKETCH_DIR/esp32_marauder_rewired.ino"

          pushd scaffold >/dev/null
          # Copy everything except the registry/ folder (handled as a library)
          find . -path "./registry" -prune -o \
                 -type f \( -name "*.h" -o -name "*.hpp" -o -name "*.c" -o -name "*.cpp" \) -print0 \
            | xargs -0 -I {} cp --parents "{}" "$SKETCH_DIR/"
          popd >/dev/null

          # Guard: ensure no registry/ ended up in the sketch
          test ! -d "$SKETCH_DIR/registry" || (echo "::error ::registry/ must NOT exist in sketch (it breaks library linking)"; exit 1)

          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          echo "Sketch tree (top 2 levels):"
          find "$SKETCH_DIR" -maxdepth 2 -type d | sort

      # ---------- Make registry a local library ----------
      - name: Create ESP32MarauderRegistry local library (from scaffold/registry)
        shell: bash
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.4
          architectures=*
          includes=registry/ToolRegistry.h
          PROP
          echo "Local library tree:"
          find "$LIBDIR/src" -maxdepth 3 -type f | sort

      # ---------- Sanity check includes ----------
      - name: Sanity-check ToolRegistry includes
        shell: bash
        run: |
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          echo "Search for ToolRegistry includes in sketch:"
          grep -R --line-number 'ToolRegistry.h' "$SKETCH_DIR" || true
          echo "Show heads of key files:"
          for f in "$SKETCH_DIR/RegistryInit.cpp" "$SKETCH_DIR/MenuFromRegistry.cpp" "$SKETCH_DIR/MenuFromRegistry.h"; do
            [ -f "$f" ] && { echo "----- $f"; sed -n '1,25p' "$f"; }
          done

      # ---------- Compile with explicit include to the library ----------
      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          set -e
          FQBN="${{ inputs.fqbn || matrix.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"
          EXTRA_INCLUDES="-I$HOME/Arduino/libraries/ESP32MarauderRegistry/src"
          echo "Compiling for $FQBN"
          arduino-cli compile \
            --fqbn "$FQBN" \
            "$SKETCH_DIR" \
            --warnings none \
            --export-binaries \
            --build-property compiler.cpp.extra_flags="$EXTRA_INCLUDES" \
            --build-property compiler.c.extra_flags="$EXTRA_INCLUDES"

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: rewired_${{ inputs.fqbn || matrix.fqbn }}_${{ github.sha }}
          path: _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 7
