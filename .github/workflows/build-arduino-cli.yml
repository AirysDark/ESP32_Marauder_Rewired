name: Build (Arduino CLI ? ESP32 Marauder Rewired)

on:
  push:
    branches: [ main, master ]
    tags: [ "*" ]
  pull_request:
  workflow_dispatch:
    inputs:
      fqbn:
        description: "Overwrite FQBN (e.g., esp32:esp32:esp32s3)"
        required: false
      core_version:
        description: "Arduino-ESP32 core (e.g., 2.0.11)"
        required: false
        default: "2.0.11"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        fqbn:
          - esp32:esp32:esp32
          - esp32:esp32:esp32s2
          - esp32:esp32:esp32s3

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Arduino CLI (via curl)
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH
          export PATH="${GITHUB_WORKSPACE}/bin:$PATH"
          which arduino-cli
          arduino-cli version

      - name: Configure & Install ESP32 Core
        env:
          CORE_VER: ${{ inputs.core_version || '2.0.11' }}
        run: |
          arduino-cli config init --additional-urls "https://github.com/espressif/arduino-esp32/releases/download/${CORE_VER}/package_esp32_dev_index.json"
          arduino-cli core update-index
          arduino-cli core install "esp32:esp32@${CORE_VER}"
          arduino-cli core list

      # ---------- Libraries ----------
      - name: Ensure Arduino libraries folder
        run: mkdir -p "$HOME/Arduino/libraries"

      - name: Install ESP32Ping
        uses: actions/checkout@v4
        with:
          repository: marian-craciunescu/ESP32Ping
          ref: 1.6
          path: CustomESP32Ping

      - name: Install AsyncTCP
        uses: actions/checkout@v4
        with:
          repository: me-no-dev/AsyncTCP
          ref: master
          path: CustomAsyncTCP

      - name: Install MicroNMEA
        uses: actions/checkout@v4
        with:
          repository: stevemarple/MicroNMEA
          ref: v2.0.6
          path: CustomMicroNMEA

      # Use your custom ESPAsyncWebServer from repo root
      - name: Install ESPAsyncWebServer (Custom from repo)
        run: |
          rm -rf "$HOME/Arduino/libraries/ESPAsyncWebServer"
          cp -r Custom/ESPAsyncWebServer "$HOME/Arduino/libraries/"
          echo "Installed custom ESPAsyncWebServer from repo"

      - name: Install TFT_eSPI
        uses: actions/checkout@v4
        with:
          repository: Bodmer/TFT_eSPI
          ref: V2.5.34
          path: CustomTFT_eSPI

      - name: Install XPT2046_Touchscreen
        uses: actions/checkout@v4
        with:
          repository: PaulStoffregen/XPT2046_Touchscreen
          ref: v1.4
          path: CustomXPT2046_Touchscreen

      - name: Install NimBLE-Arduino
        uses: actions/checkout@v4
        with:
          repository: h2zero/NimBLE-Arduino
          ref: 1.3.8
          path: CustomNimBLE-Arduino

      - name: Install other registry libs
        run: |
          arduino-cli lib install "ArduinoJson@6.18.2" "Adafruit NeoPixel@1.10.7" "LinkedList@1.3.3" "EspSoftwareSerial@8.1.0" "Adafruit BusIO@1.15.0" "Adafruit MAX1704X@1.0.2"

      - name: Move Custom libs into Arduino libraries folder
        run: |
          for d in Custom*; do
            bn=$(basename "$d")
            echo "Installing $bn -> $HOME/Arduino/libraries/$bn"
            rm -rf "$HOME/Arduino/libraries/$bn"
            mv "$d" "$HOME/Arduino/libraries/$bn"
          done
          echo "Installed libs:"; ls -la "$HOME/Arduino/libraries"

      # Optional TFT_eSPI user setups
      - name: Configure TFT_eSPI (optional)
        run: |
          if ls User_*.h >/dev/null 2>&1; then
            cp User_*.h "$HOME/Arduino/libraries/TFT_eSPI/"
            echo "Custom TFT_eSPI user files copied."
          else
            echo "No custom TFT_eSPI User_*.h found; skipping."
          fi

      # ---------- Package 'scaffold/registry' as a local Arduino library ----------
      - name: Create ESP32MarauderRegistry local library
        id: reglib
        shell: bash
        run: |
          set -e
          LIBDIR="$HOME/Arduino/libraries/ESP32MarauderRegistry"
          mkdir -p "$LIBDIR/src/registry"
          # Copy everything from scaffold/registry (both .h and .cpp)
          cp -r scaffold/registry/* "$LIBDIR/src/registry/" || true

          # Minimal library.properties so Arduino treats it as a lib
          cat > "$LIBDIR/library.properties" <<'PROP'
          name=ESP32MarauderRegistry
          version=0.0.1
          author=Rewired
          maintainer=Rewired
          sentence=Registry (ToolRegistry, etc.) for ESP32 Marauder Rewired.
          paragraph=Provides registry core so sketches can link without flattening sources.
          category=Other
          architectures=*
          includes=registry/ToolRegistry.h
          PROP

          echo "Local library created at $LIBDIR"
          echo "Contents:"
          find "$LIBDIR" -maxdepth 3 -type f | sort

      # ---------- Create Arduino sketch from scaffold root ----------
      - name: Prepare Sketch Folder (from scaffold/)
        id: prep
        shell: bash
        run: |
          set -e
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          mkdir -p "$SKETCH_DIR"

          # Pick the .ino at scaffold/ root
          INO_SRC=$(ls scaffold/*.ino | head -n 1)
          if [ -z "$INO_SRC" ]; then
            echo "No .ino found at scaffold/ root"; exit 1
          fi
          echo "Using INO: $INO_SRC"
          cp "$INO_SRC" "$SKETCH_DIR/esp32_marauder_rewired.ino"

          # Copy top-level code files (.h/.hpp/.c/.cpp) from scaffold root only
          find scaffold -maxdepth 1 -type f \( -name "*.h" -o -name "*.hpp" -o -name "*.c" -o -name "*.cpp" \) -exec cp "{}" "$SKETCH_DIR/" \;

          # Copy header folders that the sketch includes (but NOT registry .cpp; those are in the local lib)
          for dir in wifi bluetooth device ; do
            if [ -d "scaffold/$dir" ]; then
              mkdir -p "$SKETCH_DIR/$dir"
              # copy headers only; sources for these can stay here if needed later
              find "scaffold/$dir" -type f \( -name "*.h" -o -name "*.hpp" \) -exec cp --parents "{}" "$SKETCH_DIR/" \;
            fi
          done

          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          echo "Sketch tree (top):"
          find "$SKETCH_DIR" -maxdepth 2 -type d | sort
          echo "Root files:"
          ls -la "$SKETCH_DIR"

      # ---------- Compile ----------
      - name: Compile (Arduino CLI)
        shell: bash
        run: |
          set -e
          FQBN="${{ inputs.fqbn || matrix.fqbn }}"
          SKETCH_DIR="${{ steps.prep.outputs.sketch_dir }}"

          echo "Compiling for $FQBN"
          arduino-cli compile \
            --fqbn "$FQBN" \
            "$SKETCH_DIR" \
            --warnings none \
            --export-binaries

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: rewired_${{ inputs.fqbn || matrix.fqbn }}_${{ github.sha }}
          path: |
            _build/esp32_marauder_rewired/build/*/*.bin
          if-no-files-found: warn
          retention-days: 7
