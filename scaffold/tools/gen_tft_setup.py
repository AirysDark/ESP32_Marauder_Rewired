#!/usr/bin/env python3
import csv, os, sys, re, json

"""
gen_tft_setup.py
Generate TFT_eSPI configs for custom builds.

Inputs:
  --csv-disp=display_presets.csv
  --csv-pins=pins_display.csv
  --board=<board_label>          # matches board_label column in pins_display.csv
  --model=<display_model>        # matches "model"/"Device" column in display_presets.csv
  --out-dir=./.tft_setup         # where to write User_Setup.h + User_Setup_Select.h
  --tft-enabled=true|false       # optional; false ? serial-only mode

Outputs:
  <out-dir>/User_Setup.h
  <out-dir>/User_Setup_Select.h
"""

def arg(key, default=None):
    for a in sys.argv[1:]:
        if a.startswith(key+"="): return a.split("=",1)[1]
    return default

def load_disp(csv_path, model):
    rows = []
    with open(csv_path, newline='', encoding="utf-8") as f:
        r = csv.DictReader(f); rows = list(r)
    if not rows: return {}
    if model:
        for row in rows:
            m = (row.get("model") or row.get("Device") or "").strip()
            if m == model.strip():
                return row
    return rows[0]

def load_pins(csv_path, board_label):
    with open(csv_path, newline='', encoding="utf-8") as f:
        r = csv.DictReader(f)
        for rec in r:
            if (rec.get("board_label") or "").strip() == board_label:
                return rec
    return {}

def split_defines(s):
    if not s: return []
    toks = re.split(r'[;, \t]+', s.strip())
    out=[]
    for t in toks:
        if not t: continue
        if t.startswith('-D'): t=t[2:]
        out.append(t)
    return out

def main():
    csv_disp   = arg("--csv-disp")
    csv_pins   = arg("--csv-pins")
    board      = arg("--board")
    model      = arg("--model")
    out_dir    = arg("--out-dir","./.tft_setup")
    tft_enabled= arg("--tft-enabled","true").lower() not in ("0","false","no","off")

    os.makedirs(out_dir, exist_ok=True)
    user_setup = os.path.join(out_dir, "User_Setup.h")
    user_sel   = os.path.join(out_dir, "User_Setup_Select.h")

    if not tft_enabled:
        with open(user_sel,"w") as f:
            f.write("// Serial-only build\n#pragma once\n")
        print("[OK] Serial-only: emitted minimal User_Setup_Select.h; skipping User_Setup.h")
        return

    disp = load_disp(csv_disp, model)
    pins = load_pins(csv_pins, board)

    hdr = ["// Autogenerated TFT_eSPI setup", "#pragma once"]

    for tok in split_defines(disp.get("defines","")):
        if "=" in tok:
            k,v = tok.split("=",1)
            hdr.append(f"#define {k} {v}")
        else:
            hdr.append(f"#define {tok}")
            if tok.startswith("TFT_"):
                m = re.sub(r'[^A-Za-z0-9_]', '', tok[4:])
                if m: hdr.append(f"#define {m}_DRIVER")

    def V(row, k): return (row.get(k) or "").strip()
    pin_map=[("TFT_MISO","TFT_MISO"),("TFT_MOSI","TFT_MOSI"),("TFT_SCK","TFT_SCLK"),
             ("TFT_CS","TFT_CS"),("TFT_DC","TFT_DC"),("TFT_RST","TFT_RST"),("TFT_BL","TFT_BL")]
    for csv_name, tft_name in pin_map:
        val = V(pins, csv_name)
        if val: hdr.append(f"#define {tft_name} {val}")

    tc=V(pins,"TOUCH_CS")
    if tc: hdr.append(f"#define TOUCH_CS {tc}")
    for cand in ("TOUCH_IRQ","TOUCH_INT","TOUCH_IRQ_PIN"):
        irq=V(pins,cand)
        if irq: hdr.append(f"#define TOUCH_IRQ {irq}"); break

    with open(user_setup,"w") as f:
        f.write("\n".join(hdr)+"\n")

    with open(user_sel,"w") as f:
        f.write("// Autogenerated User_Setup_Select.h\n#pragma once\n#include \"User_Setup.h\"\n")

    print(f"[OK] Wrote {user_setup}")
    print(f"[OK] Wrote {user_sel}")

if __name__=="__main__":
    main()
