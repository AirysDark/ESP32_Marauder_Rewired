#!/usr/bin/env bash
set -euo pipefail
# gen_configs_h.sh — generate configs.h from scaffold/configs/build_defines.csv
# Usage:
#   ./scaffold/scripts/gen_configs_h.sh <output_dir> [--profile NAME] [--board LABEL] [--csv PATH]
#
# CSV format (UTF-8, LF):
#   key,value,profile,board,notes
#
# Notes:
# - Empty "profile" or "board" cells match ALL.
# - Lines starting with # are ignored.
# - "value" may be empty (treated as boolean define). If value is non-empty and not "1/0/true/false",
#   it will be emitted as a quoted string unless it already looks like a number or macro.
#
# Example row:
#   ENABLE_WIFI,1,Full,,Core WiFi enable
#
CSV_DEFAULT="scaffold/configs/build_defines.csv"
OUT_DIR="${1:-}"
shift || true

PROFILE=""
BOARD=""
CSV_PATH="$CSV_DEFAULT"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --profile) PROFILE="${2:-}"; shift 2 ;;
    --board)   BOARD="${2:-}";   shift 2 ;;
    --csv)     CSV_PATH="${2:-}"; shift 2 ;;
    *) echo "::error ::Unknown arg: $1"; exit 2 ;;
  esac
done

if [[ -z "$OUT_DIR" ]]; then
  echo "::error ::Missing output dir argument"
  exit 2
fi

if [[ ! -f "$CSV_PATH" ]]; then
  echo "::error ::CSV not found at $CSV_PATH"
  exit 1
fi

mkdir -p "$OUT_DIR"

TMP="$(mktemp)"
trap 'rm -f "$TMP"' EXIT

# Normalize CRLF -> LF into temp file
sed 's/\r$//' "$CSV_PATH" > "$TMP"

OUT_FILE="$OUT_DIR/configs.h"
{
  echo "// Auto-generated by gen_configs_h.sh — DO NOT EDIT BY HAND"
  echo "#pragma once"
  echo ""
} > "$OUT_FILE"

line_no=0
while IFS=',' read -r key value prof board notes_rest; do
  line_no=$((line_no+1))
  # Skip header and comments
  if [[ $line_no -eq 1 ]]; then
    # Basic header sanity
    hdr="$(echo "$key,$value,$prof,$board,$notes_rest" | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')"
    case "$hdr" in
      key,value,profile,board,* ) ;;
      key,value,profile,board ) ;;
      * ) echo "::warning ::Unexpected CSV header: $(head -n1 "$TMP")" ;;
    esac
    continue
  fi
  [[ -z "$key" ]] && continue
  [[ "${key:0:1}" == "#" ]] && continue

  # Trim spaces
  key="$(echo "$key" | xargs)"
  value="$(echo "$value" | xargs)"
  prof="$(echo "$prof" | xargs)"
  board="$(echo "$board" | xargs)"

  # Filter by profile/board if provided
  if [[ -n "$PROFILE" && -n "$prof" && "$PROFILE" != "$prof" ]]; then
    continue
  fi
  if [[ -n "$BOARD" && -n "$board" && "$BOARD" != "$board" ]]; then
    continue
  fi

  # Decide how to print the value
  if [[ -z "$value" ]]; then
    echo "#define $key" >> "$OUT_FILE"
  else
    # If it's 0/1/true/false or looks like a number / macro, print raw
    if [[ "$value" =~ ^(0|1|true|false)$ ]] || [[ "$value" =~ ^[0-9][0-9xXa-fA-F]*$ ]] || [[ "$value" =~ ^[A-Za-z_][A-Za-z0-9_\(\)]*$ ]]; then
      echo "#define $key $value" >> "$OUT_FILE"
    else
      # Quote strings (escape internal quotes)
      qval="$(printf "%s" "$value" | sed 's/\\/\\\\/g; s/\"/\\\"/g')"
      echo "#define $key \"$qval\"" >> "$OUT_FILE"
    fi
  fi
done < "$TMP"

echo "Wrote $OUT_FILE"
